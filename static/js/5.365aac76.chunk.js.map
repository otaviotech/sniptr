{"version":3,"sources":["repositories/firebaseClient.js","components/Snippet/SnippetEditor/SnippetEditor.js","repositories/snippet.js","repositories/programmingLanguage.js","components/ProgrammingLanguageSelector/ProgrammingLanguageSelector.js","components/Snippet/SnippetForm/SnippetForm.js","components/Snippet/Snippet/Snippet.js","components/Snippet/SnippetList/SnippetList.js","pages/snippet/SnippetsList.js"],"names":["mapResponseWithFirebaseIds","response","data","collection","Object","keys","map","key","id","mapResponseWithFirebaseId","FirebaseClient","axios","create","baseURL","SnippetEditor","props","mode","theme","width","onChange","debounce","debounceDelay","value","name","placeholder","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","fontSize","highlightSelectedWord","maxLines","minLines","animatedScroll","defaultProps","SnippetRepository","get","then","getAll","snippet","post","delete","update","put","ProgrammingLanguageSelector","fetchProgrammingLanguages","setState","isFetchingProgrammingLanguages","ProgrammingLanguageRepository","programmingLanguages","renderLanguagesMenu","onClick","state","pl","Item","this","loaderIcon","LoadingOutlined","spin","loader","indicator","hasProgrammingLanguages","length","hasLanguageSelected","programmingLanguageId","selectedLanguageName","find","selectedLanguageFileExtension","fileExtensions","Button","overlay","icon","Component","SnippetForm","layout","label","e","onChangeName","target","COMPONENT_MODE","FULL","COMPACT","CARD_TAB","tabList","tab","Snippet","onChangeBodyHandler","body","onChangeProgrammingLanguageHandler","onChangeNameHandler","currentTab","nextProps","nextState","some","condition","title","onTabChange","activeTabKey","tabBarExtraContent","to","type","EditOutlined","placement","QuestionCircleOutlined","style","color","onConfirm","onDelete","DeleteOutlined","SnippetList","gutter","snippets","xs","sm","md","xxl","SNIPPET_COMPONENT_MODE","onChangeSnippet","SnippetsList","fetchSnippets","onChangeBody","prevState","resetSnippet","undefined","addSnippetHandler","addSnippet","deleteSnippetHandler","message","success","updateSnippet","changeSnippetHandler","changedSnippet","oldSnippet","isAddButtonDisabled","direction","justify","isEditingSnippet","saveSnippetHandler","disabled"],"mappings":"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","file":"static/js/5.365aac76.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport function mapFirebaseIds (collection) {\n  return Object\n    .keys(collection)\n    .map((key)=> ({\n      ...collection[key],\n      id: key,\n    }));\n}\n\nexport function mapResponseWithFirebaseIds (response) {\n  if (!response.data) {\n    return [];\n  }\n\n  return mapFirebaseIds(response.data);\n}\n\nexport function mapResponseWithFirebaseId(id) {\n  return (response) => {\n    if (!response.data){\n      return response.data;\n    }\n\n    return {\n      ...response.data,\n      id,\n    };\n  };\n}\n\nconst FirebaseClient = axios.create({\n  baseURL: 'https://quickstart-1552009802740.firebaseio.com',\n});\n\nexport default FirebaseClient;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AceEditor from 'react-ace';\nimport { debounce } from 'debounce';\n\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/snippets/javascript';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\n\nfunction SnippetEditor(props) {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"tomorrow\"\n      width=\"100%\"\n      onChange={debounce(props.onChange, props.debounceDelay)}\n      value={props.value}\n      name=\"UNIQUE_ID_OF_DIV\"\n      placeholder={props.placeholder}\n      showPrintMargin\n      showGutter\n      highlightActiveLine\n      editorProps={{ $blockScrolling: true }}\n      setOptions={{\n        useWorker: false,\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n        fontSize: 16,\n        highlightSelectedWord: true,\n        // enableEmmet: true,\n        maxLines: 10,\n        minLines: 10,\n        animatedScroll: true,\n      }}\n    />\n  );\n}\n\nSnippetEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  debounceDelay: PropTypes.number,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nSnippetEditor.defaultProps = {\n  debounceDelay: 300,\n};\n\nexport default SnippetEditor;\n","import FirebaseClient, { mapResponseWithFirebaseIds, mapResponseWithFirebaseId } from './firebaseClient';\n\nconst getAll = () => FirebaseClient.get('/snippets.json').then(mapResponseWithFirebaseIds);\n\nconst get = (id) => FirebaseClient.get(`/snippets/${id}.json`).then(mapResponseWithFirebaseId(id));\n\nconst create = (snippet) => FirebaseClient.post('/snippets.json', snippet);\n\nconst deleteSnippet = (id) => FirebaseClient.delete(`/snippets/${id}.json`);\n\nconst update = (snippet) => FirebaseClient.put(`/snippets/${snippet.id}.json`, snippet);\n\nconst SnippetRepository = {\n  get,\n  getAll,\n  create,\n  delete: deleteSnippet,\n  update,\n};\n\nexport default SnippetRepository;\n","import FirebaseClient, { mapResponseWithFirebaseIds } from './firebaseClient';\n\nconst getAll = () => FirebaseClient\n  .get('/programmingLanguages.json')\n  .then(mapResponseWithFirebaseIds);\n\nexport default {\n  getAll,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, Dropdown, Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageRepository from '../../repositories/programmingLanguage';\n\nclass ProgrammingLanguageSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      programmingLanguages: [],\n      isFetchingProgrammingLanguages: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProgrammingLanguages();\n  }\n\n\tfetchProgrammingLanguages = () => {\n\t  this.setState({ isFetchingProgrammingLanguages: true });\n\n\t  ProgrammingLanguageRepository\n\t    .getAll()\n\t    .then((programmingLanguages) => {\n\t      this.setState({ programmingLanguages });\n\t      this.setState({ isFetchingProgrammingLanguages: false });\n\t    });\n\t}\n\n\trenderLanguagesMenu = () => (\n    <Menu onClick={({ key }) => this.props.onChange(key)}>\n\t\t\t{this.state.programmingLanguages.map((pl) => (\n\t\t\t\t<Menu.Item key={pl.id}>\n\t\t\t\t\t{pl.name}\n\t\t\t\t</Menu.Item>\n\t\t\t))}\n\t\t</Menu>\n\t)\n\n\trender() {\n\t  const loaderIcon = <LoadingOutlined spin />;\n\t  const loader = <Spin indicator={loaderIcon} />;\n\n\t  if (this.state.isFetchingProgrammingLanguages) return loader;\n\n\t  const hasProgrammingLanguages = this.state.programmingLanguages.length > 0;\n\t  const hasLanguageSelected = !!this.props.programmingLanguageId;\n\n\t  const selectedLanguageName = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).name\n\t    : 'Language...';\n\n\t  const selectedLanguageFileExtension = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).fileExtensions[0]\n\t    : '.ext';\n\n\t  return (\n\t\t\t<Dropdown.Button\n\t\t\t\toverlay={this.renderLanguagesMenu()}\n        icon={<span>{selectedLanguageFileExtension}</span>}\n\t\t\t>\n        {selectedLanguageName}\n\t\t\t</Dropdown.Button>\n\t  );\n\t}\n}\n\nProgrammingLanguageSelector.propTypes = {\n  programmingLanguageId: PropTypes.string, // eslint-disable-line\n  onChange: PropTypes.func.isRequired,\n};\n\n\nexport default ProgrammingLanguageSelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input } from 'antd';\n\nconst SnippetForm = (props) => {\n  return (\n    <Form layout=\"vertical\">\n      <Form.Item label=\"Name: \">\n        <Input\n          placeholder=\"Print a Javascript array.\"\n          value={props.snippet.name}\n          onChange={e => props.onChangeName(e.target.value)}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n\nSnippetForm.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  onChangeName: PropTypes.func.isRequired,\n};\n\nexport default SnippetForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Tooltip, Popconfirm, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageSelector from '../../ProgrammingLanguageSelector/ProgrammingLanguageSelector';\nimport SnippetForm from '../SnippetForm/SnippetForm';\nimport SnippetEditor from '../SnippetEditor/SnippetEditor';\n\nexport const COMPONENT_MODE = {\n  FULL: 'FULL',\n  COMPACT: 'COMPACT',\n};\n\nconst CARD_TAB = {\n  VIEW: 'VIEW',\n  EDIT: 'EDIT',\n};\n\nconst tabList = [\n  {\n    key: CARD_TAB.VIEW,\n    tab: 'View',\n  },\n  {\n    key: CARD_TAB.EDIT,\n    tab: 'Edit',\n  },\n];\n\nclass Snippet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: CARD_TAB.VIEW,\n    };\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return [\n      nextProps.snippet.body !== this.props.snippet.body,\n      nextProps.snippet.programmingLanguageId !== this.props.snippet.programmingLanguageId,\n      nextProps.snippet.name !== this.props.snippet.name,\n      nextState.currentTab !== this.state.currentTab,\n    ].some(condition => condition === true);\n  }\n\n  onChangeBodyHandler = (body) => {\n    if (body === this.props.snippet.body) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      body,\n    });\n  }\n\n  onChangeProgrammingLanguageHandler = (programmingLanguageId) => {\n    if (programmingLanguageId === this.props.snippet.programmingLanguageId) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      programmingLanguageId,\n    });\n  }\n\n  onChangeNameHandler = (name) => {\n    if (name === this.props.snippet.name) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      name,\n    });\n  }\n\n  render() {\n    return (\n      <Card\n        title={this.props.snippet.name || 'Unnamed Snippet'}\n        tabList={tabList}\n        onTabChange={(currentTab) => this.setState({ currentTab })}\n        activeTabKey={this.state.currentTab}\n        tabBarExtraContent={\n          <Space>\n            {this.props.mode === COMPONENT_MODE.COMPACT && (\n              <Tooltip title=\"Edit\">\n                <Link\n                  to={`snippets/${this.props.snippet.id}`}\n                >\n                  <Button\n                    type=\"default\"\n                    icon={<EditOutlined />}\n                  />\n                </Link>\n              </Tooltip>\n            )}\n            <Tooltip title=\"Delete\">\n              <Popconfirm\n                placement=\"topLeft\"\n                title=\"Are you sure？\"\n                icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n                onConfirm={this.props.onDelete}\n              >\n                <Button type=\"danger\" icon={<DeleteOutlined />} />\n              </Popconfirm>\n            </Tooltip>\n          </Space>\n        }\n      >\n        {this.state.currentTab === CARD_TAB.VIEW && (\n          <SnippetEditor\n            value={this.props.snippet.body}\n            onChange={this.onChangeBodyHandler}\n            debounceDelay={800}\n            placeholder=\"Your <Awesome /> snippet.\"\n          />\n        )}\n\n        {this.state.currentTab === CARD_TAB.EDIT && (\n          <>\n            <SnippetForm\n              snippet={this.props.snippet}\n              onChangeName={this.onChangeNameHandler}\n            />\n            <ProgrammingLanguageSelector\n              programmingLanguageId={this.props.snippet.programmingLanguageId}\n              onChange={this.onChangeProgrammingLanguageHandler}\n            />\n          </>\n        )}\n      </Card>\n    );\n  }\n}\n\nSnippet.defaultProps = {\n  mode: COMPONENT_MODE.FULL,\n};\n\nSnippet.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  mode: PropTypes.string,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Snippet;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'antd';\nimport Snippet, { COMPONENT_MODE as SNIPPET_COMPONENT_MODE } from '../Snippet/Snippet';\n\nfunction SnippetList(props) {\n  return (\n    <Row gutter={[24, 24]}>\n      {props.snippets.map((snippet) => (\n        <Col xs={24} sm={24} md={12} xxl={6} key={snippet.id}>\n          <Snippet\n            snippet={snippet}\n            mode={SNIPPET_COMPONENT_MODE.COMPACT}\n            onDelete={() => props.onDelete(snippet.id)}\n            onChange={props.onChangeSnippet}\n          />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nSnippetList.propTypes = {\n  snippets: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string.isRequired,\n      programmingLanguageId: PropTypes.string,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChangeSnippet: PropTypes.func.isRequired,\n};\n\nexport default SnippetList;\n","import React, { Component } from 'react';\nimport { Row, Col, Button, Space, message } from 'antd';\nimport { debounce } from 'debounce';\nimport SnippetRepository from '../../repositories/snippet';\nimport SnippetEditor from '../../components/Snippet/SnippetEditor/SnippetEditor';\nimport SnippetList from '../../components/Snippet/SnippetList/SnippetList';\n\nclass SnippetsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snippets: [],\n      snippet: {\n        id: undefined,\n        name: '',\n        body: '',\n        programmingLanguageId: undefined,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSnippets();\n  }\n\n  fetchSnippets = () => {\n    SnippetRepository.getAll()\n      .then((snippets) => {\n        this.setState({ snippets });\n      });\n  }\n\n  onChangeBody = (body) => {\n    this.setState((prevState) => ({\n      snippet: {\n        ...prevState.snippet,\n        body,\n      },\n    }));\n  };\n\n  resetSnippet = () => {\n    this.setState({\n      snippet: {\n        id: undefined,\n        body: '',\n      },\n    });\n  };\n\n  addSnippetHandler = () => {\n    this.addSnippet(this.state.snippet);\n  };\n\n  deleteSnippetHandler = (id) => {\n    SnippetRepository.delete(id)\n      .then(() => {\n        this.fetchSnippets();\n        message.success('Snippet successfuly deleted.');\n      });\n  };\n\n  updateSnippet = debounce((snippet) => { // eslint-disable-line\n    SnippetRepository.update(snippet)\n      .then(() => {\n        message.success('Snippet successfuly saved.');\n      });\n  }, 1000)\n\n  changeSnippetHandler = (changedSnippet) => {\n    this.setState((prevState) => {\n      const updatedSnippets = prevState.snippets.map((oldSnippet) => {\n        return oldSnippet.id === changedSnippet.id\n          ? changedSnippet\n          : oldSnippet;\n      });\n\n      return { snippets: updatedSnippets };\n    });\n\n    this.updateSnippet(changedSnippet);\n  };\n\n  addSnippet = (snippet) => {\n    SnippetRepository.create(snippet)\n      .then(() => {\n        this.resetSnippet();\n        this.fetchSnippets();\n        message.success('Snippet successfuly added.');\n      });\n  };\n\n  render() {\n    const isAddButtonDisabled = this.state.snippet.body.length === 0;\n\n    return (\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Row gutter={16}>\n          <Col>\n            <h1>SnippetsList</h1>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24}>\n            <SnippetEditor\n              value={this.state.snippet.body}\n              onChange={this.onChangeBody}\n              placeholder=\"Your <Awesome /> snippet...\"\n            />\n          </Col>\n        </Row>\n\n        <Row justify=\"end\">\n          <Col>\n            <Button\n              type=\"primary\"\n              onClick={\n                this.state.isEditingSnippet\n                  ? this.saveSnippetHandler\n                  : this.addSnippetHandler\n              }\n              disabled={isAddButtonDisabled}\n            >\n              {this.state.isEditingSnippet ? 'Save' : 'Add'} snippet!\n            </Button>\n          </Col>\n        </Row>\n\n        <section>\n          <Row>\n            <Col>\n              <h1>Your snippets</h1>\n            </Col>\n          </Row>\n          <SnippetList\n            snippets={this.state.snippets}\n            onChangeSnippet={this.changeSnippetHandler}\n            onDelete={this.deleteSnippetHandler}\n          />\n        </section>\n      </Space>\n    );\n  }\n}\n\nexport default SnippetsList;\n"],"sourceRoot":""}