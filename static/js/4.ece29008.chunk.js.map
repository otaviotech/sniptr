{"version":3,"sources":["repositories/firebaseClient.js","components/Snippet/SnippetEditor/SnippetEditor.js","repositories/snippet.js","repositories/programmingLanguage.js","components/ProgrammingLanguageSelector/ProgrammingLanguageSelector.js","components/Snippet/SnippetForm/SnippetForm.js","components/Snippet/Snippet/Snippet.js","../node_modules/@ant-design/icons-svg/es/asn/SaveOutlined.js","../node_modules/@ant-design/icons/es/icons/SaveOutlined.js","pages/snippet/SnippetEditPage/SnippetEditPage.js"],"names":["mapResponseWithFirebaseIds","response","data","collection","Object","keys","map","key","id","mapResponseWithFirebaseId","FirebaseClient","axios","create","baseURL","SnippetEditor","props","mode","theme","width","onChange","debounce","debounceDelay","value","name","placeholder","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","fontSize","highlightSelectedWord","maxLines","minLines","animatedScroll","defaultProps","SnippetRepository","get","then","getAll","snippet","post","delete","update","put","ProgrammingLanguageSelector","fetchProgrammingLanguages","setState","isFetchingProgrammingLanguages","ProgrammingLanguageRepository","programmingLanguages","renderLanguagesMenu","onClick","state","pl","Item","this","loaderIcon","LoadingOutlined","spin","loader","indicator","hasProgrammingLanguages","length","hasLanguageSelected","programmingLanguageId","selectedLanguageName","find","selectedLanguageFileExtension","fileExtensions","Button","overlay","icon","Component","SnippetForm","layout","label","e","onChangeName","target","CARD_TAB","tabList","tab","Snippet","onChangeBodyHandler","body","onChangeProgrammingLanguageHandler","onChangeNameHandler","currentTab","nextProps","nextState","some","condition","title","onTabChange","activeTabKey","tabBarExtraContent","to","type","EditOutlined","placement","QuestionCircleOutlined","style","color","onConfirm","onDelete","DeleteOutlined","SaveOutlined","ref","React","AntdIcon","assign","SaveOutlinedSvg","displayName","SnippetEditPage","isFetchingSnippet","undefined","fetchSnippet","snippetId","redirectToListingPage","history","replace","deleteSnippetHandler","match","params","message","success","changeSnippetHandler","saveSnippetHandler","direction","justify","withRouter"],"mappings":"4LAWO,SAASA,EAA4BC,GAC1C,OAAKA,EAASC,MAVgBC,EAcRF,EAASC,KAbxBE,OACJC,KAAKF,GACLG,KAAI,SAACC,GAAD,sBACAJ,EAAWI,GADX,CAEHC,GAAID,QAMC,GAXJ,IAAyBJ,EAiBzB,SAASM,EAA0BD,GACxC,OAAO,SAACP,GACN,OAAKA,EAASC,KAIP,eACFD,EAASC,KADd,CAEEM,OALOP,EAASC,MAUtB,IAAMQ,E,OAAiBC,EAAMC,OAAO,CAClCC,QAAS,oDAGIH,O,iCCpCf,kFAWA,SAASI,EAAcC,GACrB,OACE,kBAAC,IAAD,CACEC,KAAK,aACLC,MAAM,WACNC,MAAM,OACNC,SAAUC,mBAASL,EAAMI,SAAUJ,EAAMM,eACzCC,MAAOP,EAAMO,MACbC,KAAK,mBACLC,YAAaT,EAAMS,YACnBC,iBAAe,EACfC,YAAU,EACVC,qBAAmB,EACnBC,YAAa,CAAEC,iBAAiB,GAChCC,WAAY,CACVC,WAAW,EACXC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,EACTC,SAAU,GACVC,uBAAuB,EAEvBC,SAAU,GACVC,SAAU,GACVC,gBAAgB,KAaxB3B,EAAc4B,aAAe,CAC3BrB,cAAe,KAGFP,O,iCCtDf,aAYM6B,EAAoB,CACxBC,IATU,SAACpC,GAAD,OAAQE,IAAekC,IAAf,oBAAgCpC,EAAhC,UAA2CqC,KAAKpC,YAA0BD,KAU5FsC,OAZa,kBAAMpC,IAAekC,IAAI,kBAAkBC,KAAK7C,MAa7DY,OATa,SAACmC,GAAD,OAAarC,IAAesC,KAAK,iBAAkBD,IAUhEE,OARoB,SAACzC,GAAD,OAAQE,IAAeuC,OAAf,oBAAmCzC,EAAnC,WAS5B0C,OAPa,SAACH,GAAD,OAAarC,IAAeyC,IAAf,oBAAgCJ,EAAQvC,GAAxC,SAAmDuC,KAUhEJ,O,6NCdA,EAJA,kBAAMjC,IAClBkC,IAAI,8BACJC,KAAK7C,MCuEOoD,E,kDAnEb,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IAWTsC,0BAA4B,WAC1B,EAAKC,SAAS,CAAEC,gCAAgC,IAEhDC,IAEGX,MAAK,SAACY,GACL,EAAKH,SAAS,CAAEG,yBAChB,EAAKH,SAAS,CAAEC,gCAAgC,QAnBlC,EAuBpBG,oBAAsB,kBACnB,kBAAC,IAAD,CAAMC,QAAS,gBAAGpD,EAAH,EAAGA,IAAH,OAAa,EAAKQ,MAAMI,SAASZ,KAChD,EAAKqD,MAAMH,qBAAqBnD,KAAI,SAACuD,GAAD,OACpC,kBAAC,IAAKC,KAAN,CAAWvD,IAAKsD,EAAGrD,IACjBqD,EAAGtC,WAzBL,EAAKqC,MAAQ,CACXH,qBAAsB,GACtBF,gCAAgC,GAJjB,E,gEASjBQ,KAAKV,8B,+BAwBE,IAAD,OACDW,EAAa,kBAACC,EAAA,EAAD,CAAiBC,MAAI,IAClCC,EAAS,kBAAC,IAAD,CAAMC,UAAWJ,IAEhC,GAAID,KAAKH,MAAML,+BAAgC,OAAOY,EAEtD,IAAME,EAA0BN,KAAKH,MAAMH,qBAAqBa,OAAS,EACnEC,IAAwBR,KAAKhD,MAAMyD,sBAEnCC,EAAwBJ,GAA2BE,EACrDR,KAAKH,MAAMH,qBAAqBiB,MAAK,SAAAb,GAAE,OAAIA,EAAGrD,KAAO,EAAKO,MAAMyD,yBAAuBjD,KACvF,cAEEoD,EAAiCN,GAA2BE,EAC9DR,KAAKH,MAAMH,qBAAqBiB,MAAK,SAAAb,GAAE,OAAIA,EAAGrD,KAAO,EAAKO,MAAMyD,yBAAuBI,eAAe,GACtG,OAEJ,OACA,kBAAC,IAASC,OAAV,CACCC,QAASf,KAAKL,sBACVqB,KAAM,8BAAOJ,IAEZF,O,GAxDiCO,a,kBCqB3BC,EAxBK,SAAClE,GACnB,OACE,kBAAC,IAAD,CAAMmE,OAAO,YACX,kBAAC,IAAKpB,KAAN,CAAWqB,MAAM,UACf,kBAAC,IAAD,CACE3D,YAAY,4BACZF,MAAOP,EAAMgC,QAAQxB,KACrBJ,SAAU,SAAAiE,GAAC,OAAIrE,EAAMsE,aAAaD,EAAEE,OAAOhE,a,SCD/CiE,EACE,OADFA,EAEE,OAGFC,EAAU,CACd,CACEjF,IAAKgF,EACLE,IAAK,QAEP,CACElF,IAAKgF,EACLE,IAAK,SAIHC,E,kDACJ,WAAY3E,GAAQ,IAAD,8BACjB,cAAMA,IAgBR4E,oBAAsB,SAACC,GACjBA,IAAS,EAAK7E,MAAMgC,QAAQ6C,MAIhC,EAAK7E,MAAMI,SAAX,eACK,EAAKJ,MAAMgC,QADhB,CAEE6C,WAxBe,EA4BnBC,mCAAqC,SAACrB,GAChCA,IAA0B,EAAKzD,MAAMgC,QAAQyB,uBAIjD,EAAKzD,MAAMI,SAAX,eACK,EAAKJ,MAAMgC,QADhB,CAEEyB,4BAnCe,EAuCnBsB,oBAAsB,SAACvE,GACjBA,IAAS,EAAKR,MAAMgC,QAAQxB,MAIhC,EAAKR,MAAMI,SAAX,eACK,EAAKJ,MAAMgC,QADhB,CAEExB,WA5CF,EAAKqC,MAAQ,CACXmC,WAAYR,GAHG,E,kEAQGS,EAAWC,GAC/B,MAAO,CACLD,EAAUjD,QAAQ6C,OAAS7B,KAAKhD,MAAMgC,QAAQ6C,KAC9CI,EAAUjD,QAAQyB,wBAA0BT,KAAKhD,MAAMgC,QAAQyB,sBAC/DwB,EAAUjD,QAAQxB,OAASwC,KAAKhD,MAAMgC,QAAQxB,KAC9C0E,EAAUF,aAAehC,KAAKH,MAAMmC,YACpCG,MAAK,SAAAC,GAAS,OAAkB,IAAdA,O,+BAoCZ,IAAD,OACP,OACE,kBAAC,IAAD,CACEC,MAAOrC,KAAKhD,MAAMgC,QAAQxB,MAAQ,kBAClCiE,QAASA,EACTa,YAAa,SAACN,GAAD,OAAgB,EAAKzC,SAAS,CAAEyC,gBAC7CO,aAAcvC,KAAKH,MAAMmC,WACzBQ,mBACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASH,MAAM,QACb,kBAAC,IAAD,CACEI,GAAE,mBAAczC,KAAKhD,MAAMgC,QAAQvC,KAEnC,kBAAC,IAAD,CACEiG,KAAK,UACL1B,KAAM,kBAAC2B,EAAA,EAAD,UAIZ,kBAAC,IAAD,CAASN,MAAM,UACb,kBAAC,IAAD,CACEO,UAAU,UACVP,MAAM,qBACNrB,KAAM,kBAAC6B,EAAA,EAAD,CAAwBC,MAAO,CAAEC,MAAO,SAC9CC,UAAWhD,KAAKhD,MAAMiG,UAEtB,kBAAC,IAAD,CAAQP,KAAK,SAAS1B,KAAM,kBAACkC,EAAA,EAAD,YAMnClD,KAAKH,MAAMmC,aAAeR,GACzB,kBAACzE,EAAA,EAAD,CACEQ,MAAOyC,KAAKhD,MAAMgC,QAAQ6C,KAC1BzE,SAAU4C,KAAK4B,oBACftE,cAAe,IACfG,YAAY,8BAIfuC,KAAKH,MAAMmC,aAAeR,GACzB,oCACE,kBAAC,EAAD,CACExC,QAASgB,KAAKhD,MAAMgC,QACpBsC,aAActB,KAAK+B,sBAErB,kBAAC,EAAD,CACEtB,sBAAuBT,KAAKhD,MAAMgC,QAAQyB,sBAC1CrD,SAAU4C,KAAK8B,2C,GApGPb,aAwHPU,O,kJC/IAwB,EADI,CAAE,KAAQ,OAAQ,MAAS,WAAY,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,sb,SCI3LA,EAAe,SAAsBnG,EAAOoG,GAC9C,OAAOC,gBAAoBC,IAAUjH,OAAOkH,OAAO,GAAIvG,EAAO,CAC5DoG,IAAKA,EACLpC,KAAMwC,MAIVL,EAAaM,YAAc,eACZJ,mBAAiBF,G,2BCL1BO,E,4MACJ7D,MAAQ,CACN8D,mBAAmB,EACnB3E,aAAS4E,G,EAQXC,aAAe,SAACC,GACd,EAAKvE,SAAS,CAAEoE,mBAAmB,IAEnC/E,IAAkBC,IAAIiF,GACnBhF,MAAK,SAACE,GACL,EAAKO,SAAS,CACZP,UACA2E,mBAAmB,Q,EAK3BI,sBAAwB,WACtB,EAAK/G,MAAMgH,QAAQC,QAAQ,c,EAG7BC,qBAAuB,WAAO,IACpBJ,EAAc,EAAK9G,MAAMmH,MAAMC,OAA/BN,UAERlF,IAAkBM,OAAO4E,GACtBhF,MAAK,WACJuF,IAAQC,QAAQ,gCAChB,EAAKP,4B,EAIXQ,qBAAuB,SAACvF,GACtB,EAAKO,SAAS,CAAEP,a,EAGlBwF,mBAAqBnH,oBAAS,WAC5BuB,IAAkBO,OAAO,EAAKU,MAAMb,SACjCF,MAAK,WACJuF,IAAQC,QAAQ,8BAChB,EAAKP,6BAER,K,kEAzCkB,IACXD,EAAc9D,KAAKhD,MAAMmH,MAAMC,OAA/BN,UACR9D,KAAK6D,aAAaC,K,+BA0ClB,OACE,kBAAC,IAAD,CAAOW,UAAU,WAAW3B,MAAO,CAAE3F,MAAO,UACxC6C,KAAKH,MAAM8D,qBAAuB3D,KAAKH,MAAMb,SAC7C,kBAAC2C,EAAA,EAAD,CACE3C,QAASgB,KAAKH,MAAMb,QACpBiE,SAAUjD,KAAKkE,qBACf9G,SAAU4C,KAAKuE,uBAGnB,kBAAC,IAAD,CAAKG,QAAQ,OACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE9E,QAASI,KAAKwE,mBACdxD,KAAM,kBAAC,EAAD,MACN0B,KAAK,WAHP,e,GA7DkBzB,aA2Ef0D,sBAAWjB","file":"static/js/4.ece29008.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport function mapFirebaseIds (collection) {\n  return Object\n    .keys(collection)\n    .map((key)=> ({\n      ...collection[key],\n      id: key,\n    }));\n}\n\nexport function mapResponseWithFirebaseIds (response) {\n  if (!response.data) {\n    return [];\n  }\n\n  return mapFirebaseIds(response.data);\n}\n\nexport function mapResponseWithFirebaseId(id) {\n  return (response) => {\n    if (!response.data){\n      return response.data;\n    }\n\n    return {\n      ...response.data,\n      id,\n    };\n  };\n}\n\nconst FirebaseClient = axios.create({\n  baseURL: 'https://quickstart-1552009802740.firebaseio.com',\n});\n\nexport default FirebaseClient;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AceEditor from 'react-ace';\nimport { debounce } from 'debounce';\n\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/snippets/javascript';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\n\nfunction SnippetEditor(props) {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"tomorrow\"\n      width=\"100%\"\n      onChange={debounce(props.onChange, props.debounceDelay)}\n      value={props.value}\n      name=\"UNIQUE_ID_OF_DIV\"\n      placeholder={props.placeholder}\n      showPrintMargin\n      showGutter\n      highlightActiveLine\n      editorProps={{ $blockScrolling: true }}\n      setOptions={{\n        useWorker: false,\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n        fontSize: 16,\n        highlightSelectedWord: true,\n        // enableEmmet: true,\n        maxLines: 10,\n        minLines: 10,\n        animatedScroll: true,\n      }}\n    />\n  );\n}\n\nSnippetEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  debounceDelay: PropTypes.number,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nSnippetEditor.defaultProps = {\n  debounceDelay: 300,\n};\n\nexport default SnippetEditor;\n","import FirebaseClient, { mapResponseWithFirebaseIds, mapResponseWithFirebaseId } from './firebaseClient';\n\nconst getAll = () => FirebaseClient.get('/snippets.json').then(mapResponseWithFirebaseIds);\n\nconst get = (id) => FirebaseClient.get(`/snippets/${id}.json`).then(mapResponseWithFirebaseId(id));\n\nconst create = (snippet) => FirebaseClient.post('/snippets.json', snippet);\n\nconst deleteSnippet = (id) => FirebaseClient.delete(`/snippets/${id}.json`);\n\nconst update = (snippet) => FirebaseClient.put(`/snippets/${snippet.id}.json`, snippet);\n\nconst SnippetRepository = {\n  get,\n  getAll,\n  create,\n  delete: deleteSnippet,\n  update,\n};\n\nexport default SnippetRepository;\n","import FirebaseClient, { mapResponseWithFirebaseIds } from './firebaseClient';\n\nconst getAll = () => FirebaseClient\n  .get('/programmingLanguages.json')\n  .then(mapResponseWithFirebaseIds);\n\nexport default {\n  getAll,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, Dropdown, Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageRepository from '../../repositories/programmingLanguage';\n\nclass ProgrammingLanguageSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      programmingLanguages: [],\n      isFetchingProgrammingLanguages: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProgrammingLanguages();\n  }\n\n\tfetchProgrammingLanguages = () => {\n\t  this.setState({ isFetchingProgrammingLanguages: true });\n\n\t  ProgrammingLanguageRepository\n\t    .getAll()\n\t    .then((programmingLanguages) => {\n\t      this.setState({ programmingLanguages });\n\t      this.setState({ isFetchingProgrammingLanguages: false });\n\t    });\n\t}\n\n\trenderLanguagesMenu = () => (\n    <Menu onClick={({ key }) => this.props.onChange(key)}>\n\t\t\t{this.state.programmingLanguages.map((pl) => (\n\t\t\t\t<Menu.Item key={pl.id}>\n\t\t\t\t\t{pl.name}\n\t\t\t\t</Menu.Item>\n\t\t\t))}\n\t\t</Menu>\n\t)\n\n\trender() {\n\t  const loaderIcon = <LoadingOutlined spin />;\n\t  const loader = <Spin indicator={loaderIcon} />;\n\n\t  if (this.state.isFetchingProgrammingLanguages) return loader;\n\n\t  const hasProgrammingLanguages = this.state.programmingLanguages.length > 0;\n\t  const hasLanguageSelected = !!this.props.programmingLanguageId;\n\n\t  const selectedLanguageName = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).name\n\t    : 'Language...';\n\n\t  const selectedLanguageFileExtension = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).fileExtensions[0]\n\t    : '.ext';\n\n\t  return (\n\t\t\t<Dropdown.Button\n\t\t\t\toverlay={this.renderLanguagesMenu()}\n        icon={<span>{selectedLanguageFileExtension}</span>}\n\t\t\t>\n        {selectedLanguageName}\n\t\t\t</Dropdown.Button>\n\t  );\n\t}\n}\n\nProgrammingLanguageSelector.propTypes = {\n  programmingLanguageId: PropTypes.string, // eslint-disable-line\n  onChange: PropTypes.func.isRequired,\n};\n\n\nexport default ProgrammingLanguageSelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input } from 'antd';\n\nconst SnippetForm = (props) => {\n  return (\n    <Form layout=\"vertical\">\n      <Form.Item label=\"Name: \">\n        <Input\n          placeholder=\"Print a Javascript array.\"\n          value={props.snippet.name}\n          onChange={e => props.onChangeName(e.target.value)}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n\nSnippetForm.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  onChangeName: PropTypes.func.isRequired,\n};\n\nexport default SnippetForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Tooltip, Popconfirm, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageSelector from '../../ProgrammingLanguageSelector/ProgrammingLanguageSelector';\nimport SnippetForm from '../SnippetForm/SnippetForm';\nimport SnippetEditor from '../SnippetEditor/SnippetEditor';\n\nconst CARD_TAB = {\n  VIEW: 'VIEW',\n  EDIT: 'EDIT',\n};\n\nconst tabList = [\n  {\n    key: CARD_TAB.VIEW,\n    tab: 'View',\n  },\n  {\n    key: CARD_TAB.EDIT,\n    tab: 'Edit',\n  },\n];\n\nclass Snippet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: CARD_TAB.VIEW,\n    };\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return [\n      nextProps.snippet.body !== this.props.snippet.body,\n      nextProps.snippet.programmingLanguageId !== this.props.snippet.programmingLanguageId,\n      nextProps.snippet.name !== this.props.snippet.name,\n      nextState.currentTab !== this.state.currentTab,\n    ].some(condition => condition === true);\n  }\n\n  onChangeBodyHandler = (body) => {\n    if (body === this.props.snippet.body) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      body,\n    });\n  }\n\n  onChangeProgrammingLanguageHandler = (programmingLanguageId) => {\n    if (programmingLanguageId === this.props.snippet.programmingLanguageId) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      programmingLanguageId,\n    });\n  }\n\n  onChangeNameHandler = (name) => {\n    if (name === this.props.snippet.name) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      name,\n    });\n  }\n\n  render() {\n    return (\n      <Card\n        title={this.props.snippet.name || 'Unnamed Snippet'}\n        tabList={tabList}\n        onTabChange={(currentTab) => this.setState({ currentTab })}\n        activeTabKey={this.state.currentTab}\n        tabBarExtraContent={\n          <Space>\n            <Tooltip title=\"Edit\">\n              <Link\n                to={`snippets/${this.props.snippet.id}`}\n              >\n                <Button\n                  type=\"default\"\n                  icon={<EditOutlined />}\n                />\n              </Link>\n            </Tooltip>\n            <Tooltip title=\"Delete\">\n              <Popconfirm\n                placement=\"topLeft\"\n                title=\"Are you sure？\"\n                icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n                onConfirm={this.props.onDelete}\n              >\n                <Button type=\"danger\" icon={<DeleteOutlined />} />\n              </Popconfirm>\n            </Tooltip>\n          </Space>\n        }\n      >\n        {this.state.currentTab === CARD_TAB.VIEW && (\n          <SnippetEditor\n            value={this.props.snippet.body}\n            onChange={this.onChangeBodyHandler}\n            debounceDelay={800}\n            placeholder=\"Your <Awesome /> snippet.\"\n          />\n        )}\n\n        {this.state.currentTab === CARD_TAB.EDIT && (\n          <>\n            <SnippetForm\n              snippet={this.props.snippet}\n              onChangeName={this.onChangeNameHandler}\n            />\n            <ProgrammingLanguageSelector\n              programmingLanguageId={this.props.snippet.programmingLanguageId}\n              onChange={this.onChangeProgrammingLanguageHandler}\n            />\n          </>\n        )}\n      </Card>\n    );\n  }\n}\n\nSnippet.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Snippet;\n","// This icon file is generated automatically.\n// tslint:disable\nvar SaveOutlined = { \"name\": \"save\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M893.3 293.3L730.7 130.7c-7.5-7.5-16.7-13-26.7-16V112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V338.5c0-17-6.7-33.2-18.7-45.2zM384 184h256v104H384V184zm456 656H184V184h136v136c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V205.8l136 136V840zM512 442c-79.5 0-144 64.5-144 144s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144zm0 224c-44.2 0-80-35.8-80-80s35.8-80 80-80 80 35.8 80 80-35.8 80-80 80z\" } }] } };\nexport default SaveOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SaveOutlinedSvg from \"@ant-design/icons-svg/es/asn/SaveOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SaveOutlined = function SaveOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: SaveOutlinedSvg\n  }));\n};\n\nSaveOutlined.displayName = 'SaveOutlined';\nexport default React.forwardRef(SaveOutlined);","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Row, Col, Space, Button, message } from 'antd';\nimport { SaveOutlined } from '@ant-design/icons';\nimport { debounce } from 'debounce';\n\nimport SnippetRepository from '../../../repositories/snippet';\nimport Snippet from '../../../components/Snippet/Snippet/Snippet';\n\nclass SnippetEditPage extends Component {\n  state = {\n    isFetchingSnippet: false,\n    snippet: undefined,\n  }\n\n  componentDidMount() {\n    const { snippetId } = this.props.match.params;\n    this.fetchSnippet(snippetId);\n  }\n\n  fetchSnippet = (snippetId) => {\n    this.setState({ isFetchingSnippet: true });\n\n    SnippetRepository.get(snippetId)\n      .then((snippet) => {\n        this.setState({\n          snippet,\n          isFetchingSnippet: false,\n        });\n      });\n  }\n\n  redirectToListingPage = () => {\n    this.props.history.replace('/snippets');\n  }\n\n  deleteSnippetHandler = () => {\n    const { snippetId } = this.props.match.params;\n\n    SnippetRepository.delete(snippetId)\n      .then(() => {\n        message.success('Snippet successfuly deleted.');\n        this.redirectToListingPage();\n      });\n  };\n\n  changeSnippetHandler = (snippet) => {\n    this.setState({ snippet });\n  }\n\n  saveSnippetHandler = debounce(() => { // eslint-disable-line\n    SnippetRepository.update(this.state.snippet)\n      .then(() => {\n        message.success('Snippet successfuly saved.');\n        this.redirectToListingPage();\n      });\n  }, 300)\n\n  render() {\n    return (\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        {!this.state.isFetchingSnippet && !!this.state.snippet && (\n          <Snippet\n            snippet={this.state.snippet}\n            onDelete={this.deleteSnippetHandler}\n            onChange={this.changeSnippetHandler}\n          />\n        )}\n        <Row justify=\"end\">\n          <Col>\n            <Button\n              onClick={this.saveSnippetHandler}\n              icon={<SaveOutlined />}\n              type=\"primary\"\n            >\n              Save\n            </Button>\n          </Col>\n        </Row>\n      </Space>\n    );\n  }\n}\n\nexport default withRouter(SnippetEditPage);\n"],"sourceRoot":""}