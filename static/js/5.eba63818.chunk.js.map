{"version":3,"sources":["repositories/programmingLanguage.js","components/ProgrammingLanguageSelector/ProgrammingLanguageSelector.js","components/Snippet/SnippetForm/SnippetForm.js","components/Snippet/SnippetEditor/SnippetEditor.js","components/Snippet/Snippet/Snippet.js","components/Snippet/SnippetList/SnippetList.js","pages/snippet/SnippetsList/SnippetsList.js"],"names":["FirebaseClient","get","then","mapResponseWithFirebaseIds","ProgrammingLanguageSelector","props","fetchProgrammingLanguages","setState","isFetchingProgrammingLanguages","ProgrammingLanguageRepository","programmingLanguages","renderLanguagesMenu","onClick","key","onChange","state","map","pl","Item","id","name","this","loaderIcon","LoadingOutlined","spin","loader","indicator","hasProgrammingLanguages","length","hasLanguageSelected","programmingLanguageId","selectedLanguageName","find","selectedLanguageFileExtension","fileExtensions","Button","overlay","icon","Component","SnippetForm","layout","label","placeholder","value","snippet","e","onChangeName","target","SnippetEditor","mode","theme","width","debounce","debounceDelay","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","fontSize","highlightSelectedWord","maxLines","minLines","animatedScroll","defaultProps","COMPONENT_MODE","FULL","COMPACT","CARD_TAB","tabList","tab","Snippet","onChangeBodyHandler","body","onChangeProgrammingLanguageHandler","onChangeNameHandler","currentTab","nextProps","nextState","some","condition","title","onTabChange","activeTabKey","tabBarExtraContent","type","SaveOutlined","onSave","to","EditOutlined","withoutDeleteButton","placement","QuestionCircleOutlined","style","color","onConfirm","onDelete","DeleteOutlined","SnippetList","gutter","snippets","xs","sm","md","xxl","SNIPPET_COMPONENT_MODE","onChangeSnippet","onSaveSnippet","SnippetsList","fetchSnippets","setLoading","finally","onChangeBody","prevState","resetSnippet","undefined","deleteSnippetHandler","deleteSnippet","result","error","message","success","saveSnippet","updateSnippet","addSnippet","createSnippet","isAddButtonDisabled","loadingMessage","loading","size","tip","textAlign","margin","direction","justify","disabled","span","setUpdatedSnippet","connect","dispatch","actionCreators","snippetId"],"mappings":"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","file":"static/js/5.eba63818.chunk.js","sourcesContent":["import FirebaseClient, { mapResponseWithFirebaseIds } from './firebaseClient';\n\nconst getAll = () => FirebaseClient\n  .get('/programmingLanguages.json')\n  .then(mapResponseWithFirebaseIds);\n\nexport default {\n  getAll,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, Dropdown, Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageRepository from '../../repositories/programmingLanguage';\n\nclass ProgrammingLanguageSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      programmingLanguages: [],\n      isFetchingProgrammingLanguages: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProgrammingLanguages();\n  }\n\n\tfetchProgrammingLanguages = () => {\n\t  this.setState({ isFetchingProgrammingLanguages: true });\n\n\t  ProgrammingLanguageRepository\n\t    .getAll()\n\t    .then((programmingLanguages) => {\n\t      this.setState({ programmingLanguages });\n\t      this.setState({ isFetchingProgrammingLanguages: false });\n\t    });\n\t}\n\n\trenderLanguagesMenu = () => (\n    <Menu onClick={({ key }) => this.props.onChange(key)}>\n\t\t\t{this.state.programmingLanguages.map((pl) => (\n\t\t\t\t<Menu.Item key={pl.id}>\n\t\t\t\t\t{pl.name}\n\t\t\t\t</Menu.Item>\n\t\t\t))}\n\t\t</Menu>\n\t)\n\n\trender() {\n\t  const loaderIcon = <LoadingOutlined spin />;\n\t  const loader = <Spin indicator={loaderIcon} />;\n\n\t  if (this.state.isFetchingProgrammingLanguages) return loader;\n\n\t  const hasProgrammingLanguages = this.state.programmingLanguages.length > 0;\n\t  const hasLanguageSelected = !!this.props.programmingLanguageId;\n\n\t  const selectedLanguageName = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).name\n\t    : 'Language...';\n\n\t  const selectedLanguageFileExtension = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).fileExtensions[0]\n\t    : '.ext';\n\n\t  return (\n\t\t\t<Dropdown.Button\n\t\t\t\toverlay={this.renderLanguagesMenu()}\n        icon={<span>{selectedLanguageFileExtension}</span>}\n\t\t\t>\n        {selectedLanguageName}\n\t\t\t</Dropdown.Button>\n\t  );\n\t}\n}\n\nProgrammingLanguageSelector.propTypes = {\n  programmingLanguageId: PropTypes.string, // eslint-disable-line\n  onChange: PropTypes.func.isRequired,\n};\n\n\nexport default ProgrammingLanguageSelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input } from 'antd';\n\nconst SnippetForm = (props) => {\n  return (\n    <Form layout=\"vertical\">\n      <Form.Item label=\"Name: \">\n        <Input\n          placeholder=\"Print a Javascript array.\"\n          value={props.snippet.name}\n          onChange={e => props.onChangeName(e.target.value)}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n\nSnippetForm.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  onChangeName: PropTypes.func.isRequired,\n};\n\nexport default SnippetForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AceEditor from 'react-ace';\nimport { debounce } from 'debounce';\n\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/snippets/javascript';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\n\nfunction SnippetEditor(props) {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"tomorrow\"\n      width=\"100%\"\n      onChange={debounce(props.onChange, props.debounceDelay)}\n      value={props.value}\n      name=\"UNIQUE_ID_OF_DIV\"\n      placeholder={props.placeholder}\n      showPrintMargin\n      showGutter\n      highlightActiveLine\n      editorProps={{ $blockScrolling: true }}\n      setOptions={{\n        useWorker: false,\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n        fontSize: 16,\n        highlightSelectedWord: true,\n        // enableEmmet: true,\n        maxLines: 10,\n        minLines: 10,\n        animatedScroll: true,\n      }}\n    />\n  );\n}\n\nSnippetEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  debounceDelay: PropTypes.number,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nSnippetEditor.defaultProps = {\n  debounceDelay: 300,\n};\n\nexport default SnippetEditor;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Tooltip, Popconfirm, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, QuestionCircleOutlined, SaveOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageSelector from '../../ProgrammingLanguageSelector/ProgrammingLanguageSelector';\nimport SnippetForm from '../SnippetForm/SnippetForm';\nimport SnippetEditor from '../SnippetEditor/SnippetEditor';\n\nexport const COMPONENT_MODE = {\n  FULL: 'FULL',\n  COMPACT: 'COMPACT',\n};\n\nconst CARD_TAB = {\n  VIEW: 'VIEW',\n  EDIT: 'EDIT',\n};\n\nconst tabList = [\n  {\n    key: CARD_TAB.VIEW,\n    tab: 'View',\n  },\n  {\n    key: CARD_TAB.EDIT,\n    tab: 'Edit details',\n  },\n];\n\nclass Snippet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: CARD_TAB.VIEW,\n    };\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return [\n      nextProps.snippet.body !== this.props.snippet.body,\n      nextProps.snippet.programmingLanguageId !== this.props.snippet.programmingLanguageId,\n      nextProps.snippet.name !== this.props.snippet.name,\n      nextState.currentTab !== this.state.currentTab,\n    ].some(condition => condition === true);\n  }\n\n  onChangeBodyHandler = (body) => {\n    if (body === this.props.snippet.body) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      body,\n    });\n  }\n\n  onChangeProgrammingLanguageHandler = (programmingLanguageId) => {\n    if (programmingLanguageId === this.props.snippet.programmingLanguageId) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      programmingLanguageId,\n    });\n  }\n\n  onChangeNameHandler = (name) => {\n    if (name === this.props.snippet.name) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      name,\n    });\n  }\n\n  render() {\n    return (\n      <Card\n        title={this.props.snippet.name || 'Unnamed Snippet'}\n        tabList={tabList}\n        onTabChange={(currentTab) => this.setState({ currentTab })}\n        activeTabKey={this.state.currentTab}\n        tabBarExtraContent={\n          <Space>\n            {this.props.mode === COMPONENT_MODE.COMPACT && (\n              <>\n                <Tooltip title=\"Save\">\n                  <Button\n                    type=\"primary\"\n                    icon={<SaveOutlined />}\n                    onClick={() => this.props.onSave(this.props.snippet)}\n                  />\n                </Tooltip>\n                <Tooltip title=\"Edit\">\n                  <Link\n                    to={`snippets/${this.props.snippet.id}`}\n                  >\n                    <Button\n                      type=\"default\"\n                      icon={<EditOutlined />}\n                    />\n                  </Link>\n                </Tooltip>\n              </>\n            )}\n\n            { !this.props.withoutDeleteButton && (\n              <Tooltip title=\"Delete\">\n                <Popconfirm\n                  placement=\"topLeft\"\n                  title=\"Are you sure？\"\n                  icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n                  onConfirm={this.props.onDelete}\n                >\n                  <Button type=\"danger\" icon={<DeleteOutlined />} />\n                </Popconfirm>\n              </Tooltip>\n            )}\n          </Space>\n        }\n      >\n        {this.state.currentTab === CARD_TAB.VIEW && (\n          <SnippetEditor\n            value={this.props.snippet.body}\n            onChange={this.onChangeBodyHandler}\n            debounceDelay={800}\n            placeholder=\"Your <Awesome /> snippet.\"\n          />\n        )}\n\n        {this.state.currentTab === CARD_TAB.EDIT && (\n          <>\n            <SnippetForm\n              snippet={this.props.snippet}\n              onChangeName={this.onChangeNameHandler}\n            />\n            <ProgrammingLanguageSelector\n              programmingLanguageId={this.props.snippet.programmingLanguageId}\n              onChange={this.onChangeProgrammingLanguageHandler}\n            />\n          </>\n        )}\n      </Card>\n    );\n  }\n}\n\nSnippet.defaultProps = {\n  mode: COMPONENT_MODE.FULL,\n  withoutDeleteButton: false,\n};\n\nSnippet.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  mode: PropTypes.string,\n  withoutDeleteButton: PropTypes.bool,\n  onDelete: PropTypes.func, // eslint-disable-line\n  onChange: PropTypes.func.isRequired,\n  onSave: PropTypes.func, // eslint-disable-line\n};\n\nexport default Snippet;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'antd';\nimport Snippet, { COMPONENT_MODE as SNIPPET_COMPONENT_MODE } from '../Snippet/Snippet';\n\nfunction SnippetList(props) {\n  return (\n    <Row gutter={[24, 24]}>\n      {props.snippets.map((snippet) => (\n        <Col xs={24} sm={24} md={12} xxl={6} key={snippet.id}>\n          <Snippet\n            snippet={snippet}\n            mode={SNIPPET_COMPONENT_MODE.COMPACT}\n            onDelete={() => props.onDelete(snippet.id)}\n            onChange={props.onChangeSnippet}\n            onSave={props.onSaveSnippet}\n          />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nSnippetList.propTypes = {\n  snippets: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string.isRequired,\n      programmingLanguageId: PropTypes.string,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChangeSnippet: PropTypes.func.isRequired,\n  onSaveSnippet: PropTypes.func.isRequired,\n};\n\nexport default SnippetList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Button, Space, Spin, message } from 'antd';\nimport { debounce } from 'debounce';\nimport SnippetList from '../../../components/Snippet/SnippetList/SnippetList';\nimport Snippet from '../../../components/Snippet/Snippet/Snippet';\nimport * as actionCreators from '../../../store/modules/snippet/actions';\n\nconst getEmptySnippet = () => ({\n  id: undefined,\n  name: '',\n  body: '',\n  programmingLanguageId: undefined,\n});\n\nclass SnippetsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snippet: getEmptySnippet(),\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSnippets();\n  }\n\n  fetchSnippets = () => {\n    const { fetchSnippets, setLoading } = this.props;\n\n    setLoading(true);\n\n    fetchSnippets()\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  onChangeBody = (body) => {\n    this.setState((prevState) => ({\n      snippet: {\n        ...prevState.snippet,\n        body,\n      },\n    }));\n  };\n\n  resetSnippet = () => {\n    this.setState({\n      snippet: getEmptySnippet(),\n    });\n  };\n\n  deleteSnippetHandler = (id) => {\n    const { deleteSnippet } = this.props;\n    const { fetchSnippets } = this;\n\n    deleteSnippet(id)\n      .then((result) => {\n        if (result.error) {\n          message.error('Ops, something went wrong.');\n          return;\n        }\n\n        fetchSnippets();\n        message.success('Snippet successfuly deleted.');\n      });\n  };\n\n  saveSnippet = debounce((snippet) => { // eslint-disable-line\n    const { updateSnippet } = this.props;\n\n    updateSnippet(snippet)\n      .then((result) => {\n        if (result.error) {\n          message.error('Ops, something went wrong. Try again later.');\n          return;\n        }\n\n        message.success('Snippet successfuly saved.');\n      });\n  }, 500)\n\n  addSnippet = (snippet) => {\n    const { createSnippet, fetchSnippets } = this.props;\n    const { resetSnippet } = this;\n\n    createSnippet(snippet)\n      .then((result) => {\n        if (result.error) {\n          message.error('Ops, something went wrong. Try again later.');\n          return;\n        }\n\n        resetSnippet();\n        message.success('Snippet successfuly added.');\n        fetchSnippets();\n      });\n  };\n\n  render() {\n    const isAddButtonDisabled = this.state.snippet.body.length === 0;\n\n    const loadingMessage = this.props.loading\n      ? (\n        <Spin\n          size=\"large\"\n          tip=\"Loading your snippets\"\n          style={{ textAlign: 'center', width: '100%', margin: '20px 0' }}\n        />\n      ) : null;\n\n    return (\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Row gutter={16}>\n          <Col>\n            <h1>SnippetsList</h1>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24}>\n            <Snippet\n              withoutDeleteButton\n              snippet={this.state.snippet}\n              onChange={(snippet) => this.setState({ snippet })}\n            />\n          </Col>\n        </Row>\n\n        <Row justify=\"end\">\n          <Col>\n            <Button\n              type=\"primary\"\n              onClick={() => this.addSnippet(this.state.snippet)}\n              disabled={isAddButtonDisabled}\n            >\n              Add snippet!\n            </Button>\n          </Col>\n        </Row>\n\n        <section>\n          <Row>\n            <Col span={24}>\n              <h1>Your snippets</h1>\n              {loadingMessage}\n            </Col>\n          </Row>\n          <SnippetList\n            snippets={this.props.snippets}\n            onChangeSnippet={this.props.setUpdatedSnippet}\n            onDelete={this.deleteSnippetHandler}\n            onSaveSnippet={this.saveSnippet}\n          />\n        </section>\n      </Space>\n    );\n  }\n}\n\nSnippetsList.propTypes = {\n  snippets: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loading: PropTypes.bool.isRequired,\n  setLoading: PropTypes.func.isRequired,\n  setUpdatedSnippet: PropTypes.func.isRequired,\n  createSnippet: PropTypes.func.isRequired,\n  fetchSnippets: PropTypes.func.isRequired,\n  updateSnippet: PropTypes.func.isRequired,\n  deleteSnippet: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  snippets: state.snippet.snippets,\n  loading: state.snippet.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLoading: (loading) => dispatch(actionCreators.setLoading(loading)),\n  fetchSnippets: () => dispatch(actionCreators.fetchSnippets()),\n  setUpdatedSnippet: (snippet) => dispatch(actionCreators.setUpdatedSnippet(snippet)),\n  createSnippet: (snippet) => dispatch(actionCreators.createSnippet(snippet)),\n  updateSnippet: (snippet) => dispatch(actionCreators.updateSnippet(snippet)),\n  deleteSnippet: (snippetId) => dispatch(actionCreators.deleteSnippet(snippetId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SnippetsList);\n"],"sourceRoot":""}