{"version":3,"sources":["components/Snippet/SnippetEditor/SnippetEditor.js","repositories/programmingLanguage.js","components/ProgrammingLanguageSelector/ProgrammingLanguageSelector.js","components/Snippet/SnippetForm/SnippetForm.js","components/Snippet/Snippet/Snippet.js","components/Snippet/SnippetList/SnippetList.js","pages/snippet/SnippetsList/SnippetsList.js"],"names":["SnippetEditor","props","mode","theme","width","onChange","debounce","debounceDelay","value","name","placeholder","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","fontSize","highlightSelectedWord","maxLines","minLines","animatedScroll","defaultProps","FirebaseClient","get","then","mapResponseWithFirebaseIds","ProgrammingLanguageSelector","fetchProgrammingLanguages","setState","isFetchingProgrammingLanguages","ProgrammingLanguageRepository","programmingLanguages","renderLanguagesMenu","onClick","key","state","map","pl","Item","id","this","loaderIcon","LoadingOutlined","spin","loader","indicator","hasProgrammingLanguages","length","hasLanguageSelected","programmingLanguageId","selectedLanguageName","find","selectedLanguageFileExtension","fileExtensions","Button","overlay","icon","Component","SnippetForm","layout","label","snippet","e","onChangeName","target","COMPONENT_MODE","FULL","COMPACT","CARD_TAB","tabList","tab","Snippet","onChangeBodyHandler","body","onChangeProgrammingLanguageHandler","onChangeNameHandler","currentTab","nextProps","nextState","some","condition","title","onTabChange","activeTabKey","tabBarExtraContent","to","type","EditOutlined","placement","QuestionCircleOutlined","style","color","onConfirm","onDelete","DeleteOutlined","SnippetList","gutter","snippets","xs","sm","md","xxl","SNIPPET_COMPONENT_MODE","onChangeSnippet","SnippetsList","fetchSnippets","setLoading","finally","onChangeBody","prevState","undefined","resetSnippet","addSnippetHandler","addSnippet","deleteSnippetHandler","deleteSnippet","result","error","message","success","updateSnippet","changeSnippetHandler","changedSnippet","createSnippet","isFetchingSnippets","isAddButtonDisabled","loadingMessage","loading","justify","size","tip","margin","direction","disabled","span","connect","dispatch","snippetId"],"mappings":"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","file":"static/js/5.46e8a5d5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport AceEditor from 'react-ace';\nimport { debounce } from 'debounce';\n\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/snippets/javascript';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\n\nfunction SnippetEditor(props) {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"tomorrow\"\n      width=\"100%\"\n      onChange={debounce(props.onChange, props.debounceDelay)}\n      value={props.value}\n      name=\"UNIQUE_ID_OF_DIV\"\n      placeholder={props.placeholder}\n      showPrintMargin\n      showGutter\n      highlightActiveLine\n      editorProps={{ $blockScrolling: true }}\n      setOptions={{\n        useWorker: false,\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n        fontSize: 16,\n        highlightSelectedWord: true,\n        // enableEmmet: true,\n        maxLines: 10,\n        minLines: 10,\n        animatedScroll: true,\n      }}\n    />\n  );\n}\n\nSnippetEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  debounceDelay: PropTypes.number,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nSnippetEditor.defaultProps = {\n  debounceDelay: 300,\n};\n\nexport default SnippetEditor;\n","import FirebaseClient, { mapResponseWithFirebaseIds } from './firebaseClient';\n\nconst getAll = () => FirebaseClient\n  .get('/programmingLanguages.json')\n  .then(mapResponseWithFirebaseIds);\n\nexport default {\n  getAll,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, Dropdown, Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageRepository from '../../repositories/programmingLanguage';\n\nclass ProgrammingLanguageSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      programmingLanguages: [],\n      isFetchingProgrammingLanguages: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProgrammingLanguages();\n  }\n\n\tfetchProgrammingLanguages = () => {\n\t  this.setState({ isFetchingProgrammingLanguages: true });\n\n\t  ProgrammingLanguageRepository\n\t    .getAll()\n\t    .then((programmingLanguages) => {\n\t      this.setState({ programmingLanguages });\n\t      this.setState({ isFetchingProgrammingLanguages: false });\n\t    });\n\t}\n\n\trenderLanguagesMenu = () => (\n    <Menu onClick={({ key }) => this.props.onChange(key)}>\n\t\t\t{this.state.programmingLanguages.map((pl) => (\n\t\t\t\t<Menu.Item key={pl.id}>\n\t\t\t\t\t{pl.name}\n\t\t\t\t</Menu.Item>\n\t\t\t))}\n\t\t</Menu>\n\t)\n\n\trender() {\n\t  const loaderIcon = <LoadingOutlined spin />;\n\t  const loader = <Spin indicator={loaderIcon} />;\n\n\t  if (this.state.isFetchingProgrammingLanguages) return loader;\n\n\t  const hasProgrammingLanguages = this.state.programmingLanguages.length > 0;\n\t  const hasLanguageSelected = !!this.props.programmingLanguageId;\n\n\t  const selectedLanguageName = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).name\n\t    : 'Language...';\n\n\t  const selectedLanguageFileExtension = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).fileExtensions[0]\n\t    : '.ext';\n\n\t  return (\n\t\t\t<Dropdown.Button\n\t\t\t\toverlay={this.renderLanguagesMenu()}\n        icon={<span>{selectedLanguageFileExtension}</span>}\n\t\t\t>\n        {selectedLanguageName}\n\t\t\t</Dropdown.Button>\n\t  );\n\t}\n}\n\nProgrammingLanguageSelector.propTypes = {\n  programmingLanguageId: PropTypes.string, // eslint-disable-line\n  onChange: PropTypes.func.isRequired,\n};\n\n\nexport default ProgrammingLanguageSelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input } from 'antd';\n\nconst SnippetForm = (props) => {\n  return (\n    <Form layout=\"vertical\">\n      <Form.Item label=\"Name: \">\n        <Input\n          placeholder=\"Print a Javascript array.\"\n          value={props.snippet.name}\n          onChange={e => props.onChangeName(e.target.value)}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n\nSnippetForm.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  onChangeName: PropTypes.func.isRequired,\n};\n\nexport default SnippetForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Tooltip, Popconfirm, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageSelector from '../../ProgrammingLanguageSelector/ProgrammingLanguageSelector';\nimport SnippetForm from '../SnippetForm/SnippetForm';\nimport SnippetEditor from '../SnippetEditor/SnippetEditor';\n\nexport const COMPONENT_MODE = {\n  FULL: 'FULL',\n  COMPACT: 'COMPACT',\n};\n\nconst CARD_TAB = {\n  VIEW: 'VIEW',\n  EDIT: 'EDIT',\n};\n\nconst tabList = [\n  {\n    key: CARD_TAB.VIEW,\n    tab: 'View',\n  },\n  {\n    key: CARD_TAB.EDIT,\n    tab: 'Edit',\n  },\n];\n\nclass Snippet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: CARD_TAB.VIEW,\n    };\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return [\n      nextProps.snippet.body !== this.props.snippet.body,\n      nextProps.snippet.programmingLanguageId !== this.props.snippet.programmingLanguageId,\n      nextProps.snippet.name !== this.props.snippet.name,\n      nextState.currentTab !== this.state.currentTab,\n    ].some(condition => condition === true);\n  }\n\n  onChangeBodyHandler = (body) => {\n    if (body === this.props.snippet.body) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      body,\n    });\n  }\n\n  onChangeProgrammingLanguageHandler = (programmingLanguageId) => {\n    if (programmingLanguageId === this.props.snippet.programmingLanguageId) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      programmingLanguageId,\n    });\n  }\n\n  onChangeNameHandler = (name) => {\n    if (name === this.props.snippet.name) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      name,\n    });\n  }\n\n  render() {\n    return (\n      <Card\n        title={this.props.snippet.name || 'Unnamed Snippet'}\n        tabList={tabList}\n        onTabChange={(currentTab) => this.setState({ currentTab })}\n        activeTabKey={this.state.currentTab}\n        tabBarExtraContent={\n          <Space>\n            {this.props.mode === COMPONENT_MODE.COMPACT && (\n              <Tooltip title=\"Edit\">\n                <Link\n                  to={`snippets/${this.props.snippet.id}`}\n                >\n                  <Button\n                    type=\"default\"\n                    icon={<EditOutlined />}\n                  />\n                </Link>\n              </Tooltip>\n            )}\n            <Tooltip title=\"Delete\">\n              <Popconfirm\n                placement=\"topLeft\"\n                title=\"Are you sure？\"\n                icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n                onConfirm={this.props.onDelete}\n              >\n                <Button type=\"danger\" icon={<DeleteOutlined />} />\n              </Popconfirm>\n            </Tooltip>\n          </Space>\n        }\n      >\n        {this.state.currentTab === CARD_TAB.VIEW && (\n          <SnippetEditor\n            value={this.props.snippet.body}\n            onChange={this.onChangeBodyHandler}\n            debounceDelay={800}\n            placeholder=\"Your <Awesome /> snippet.\"\n          />\n        )}\n\n        {this.state.currentTab === CARD_TAB.EDIT && (\n          <>\n            <SnippetForm\n              snippet={this.props.snippet}\n              onChangeName={this.onChangeNameHandler}\n            />\n            <ProgrammingLanguageSelector\n              programmingLanguageId={this.props.snippet.programmingLanguageId}\n              onChange={this.onChangeProgrammingLanguageHandler}\n            />\n          </>\n        )}\n      </Card>\n    );\n  }\n}\n\nSnippet.defaultProps = {\n  mode: COMPONENT_MODE.FULL,\n};\n\nSnippet.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  mode: PropTypes.string,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Snippet;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'antd';\nimport Snippet, { COMPONENT_MODE as SNIPPET_COMPONENT_MODE } from '../Snippet/Snippet';\n\nfunction SnippetList(props) {\n  return (\n    <Row gutter={[24, 24]}>\n      {props.snippets.map((snippet) => (\n        <Col xs={24} sm={24} md={12} xxl={6} key={snippet.id}>\n          <Snippet\n            snippet={snippet}\n            mode={SNIPPET_COMPONENT_MODE.COMPACT}\n            onDelete={() => props.onDelete(snippet.id)}\n            onChange={props.onChangeSnippet}\n          />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nSnippetList.propTypes = {\n  snippets: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string.isRequired,\n      programmingLanguageId: PropTypes.string,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChangeSnippet: PropTypes.func.isRequired,\n};\n\nexport default SnippetList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Row, Col, Button, Space, Spin, message } from 'antd';\nimport { debounce } from 'debounce';\nimport SnippetEditor from '../../../components/Snippet/SnippetEditor/SnippetEditor';\nimport SnippetList from '../../../components/Snippet/SnippetList/SnippetList';\nimport { setLoading, fetchSnippets, updateSnippet, createSnippet, deleteSnippet } from '../../../store/modules/snippet/actions';\n\nconst getEmptySnippet = () => ({\n  id: undefined,\n  name: '',\n  body: '',\n  programmingLanguageId: undefined,\n});\n\nclass SnippetsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFetchingSnippets: false,\n      snippet: getEmptySnippet(),\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSnippets();\n  }\n\n  fetchSnippets = () => {\n    const { fetchSnippets, setLoading } = this.props;\n\n    setLoading(true);\n\n    fetchSnippets()\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  onChangeBody = (body) => {\n    this.setState((prevState) => ({\n      snippet: getEmptySnippet(),\n    }));\n  };\n\n  resetSnippet = () => {\n    this.setState({\n      snippet: getEmptySnippet(),\n    });\n  };\n\n  addSnippetHandler = () => {\n    this.addSnippet(this.state.snippet);\n  };\n\n  deleteSnippetHandler = (id) => {\n    const { deleteSnippet } = this.props;\n    const { fetchSnippets } = this;\n\n    deleteSnippet(id)\n      .then((result) => {\n        if (result.error) {\n          message.error('Ops, something went wrong.');\n          return;\n        }\n\n        fetchSnippets();\n        message.success('Snippet successfuly deleted.');\n      });\n  };\n\n  updateSnippet = debounce((snippet) => { // eslint-disable-line\n    const { updateSnippet } = this.props;\n\n    updateSnippet(snippet)\n      .then((result) => {\n        if (result.error) {\n          message.error('Ops, something went wrong. Try again later.');\n          return;\n        }\n\n        message.success('Snippet successfuly saved.');\n      });\n  }, 1000)\n\n  changeSnippetHandler = (changedSnippet) => {\n    this.updateSnippet(changedSnippet);\n  };\n\n  addSnippet = (snippet) => {\n    const { createSnippet, fetchSnippets } = this.props;\n    const { resetSnippet } = this;\n\n    createSnippet(snippet)\n      .then((result) => {\n        if (result.error) {\n          message.error('Ops, something went wrong. Try again later.');\n          return;\n        }\n\n        resetSnippet();\n        message.success('Snippet successfuly added.');\n        fetchSnippets();\n      });\n  };\n\n  render() {\n    const isAddButtonDisabled = this.state.snippet.body.length === 0;\n\n    const loadingMessage = this.props.loading\n      ? (\n        <Row justify=\"center\">\n          <Col>\n            <Spin size=\"large\" tip=\"Loading your snippets\" style={{ margin: '50px auto' }} />\n          </Col>\n        </Row>\n      )\n      : null;\n\n    return (\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Row gutter={16}>\n          <Col>\n            <h1>SnippetsList</h1>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24}>\n            <SnippetEditor\n              value={this.state.snippet.body}\n              onChange={this.onChangeBody}\n              placeholder=\"Your <Awesome /> snippet...\"\n            />\n          </Col>\n        </Row>\n\n        <Row justify=\"end\">\n          <Col>\n            <Button\n              type=\"primary\"\n              onClick={this.addSnippetHandler}\n              disabled={isAddButtonDisabled}\n            >\n              Add snippet!\n            </Button>\n          </Col>\n        </Row>\n\n        <section>\n          <Row>\n            <Col span={24}>\n              <h1>Your snippets</h1>\n              {loadingMessage}\n            </Col>\n          </Row>\n          <SnippetList\n            snippets={this.props.snippets}\n            onChangeSnippet={this.changeSnippetHandler}\n            onDelete={this.deleteSnippetHandler}\n          />\n        </section>\n      </Space>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  snippets: state.snippet.snippets,\n  loading: state.snippet.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLoading: (loading) => dispatch(setLoading(loading)),\n  fetchSnippets: () => dispatch(fetchSnippets()),\n  createSnippet: (snippet) => dispatch(createSnippet(snippet)),\n  updateSnippet: (snippet) => dispatch(updateSnippet(snippet)),\n  deleteSnippet: (snippetId) => dispatch(deleteSnippet(snippetId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SnippetsList);\n"],"sourceRoot":""}