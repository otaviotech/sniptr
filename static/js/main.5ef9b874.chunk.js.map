{"version":3,"sources":["store/modules/snippet/actionTypes.js","components/layout/AppLayout.js","store/modules/snippet/reducer.js","store/modules/snippet/index.js","store/reducers/index.js","store/store.js","App.js","serviceWorker.js","index.js","repositories/snippet.js","store/modules/snippet/actions.js","repositories/firebaseClient.js"],"names":["SET_LOADING","FETCH_SNIPPETS","FETCH_SNIPPETS_SUCCESS","FETCH_SNIPPETS_ERROR","SET_SNIPPETS","SET_UPDATED_SNIPPET","UPDATE_SNIPPET","UPDATE_SNIPPET_SUCCESS","UPDATE_SNIPPET_ERROR","CREATE_SNIPPET","CREATE_SNIPPET_SUCCESS","CREATE_SNIPPET_ERROR","DELETE_SNIPPET","DELETE_SNIPPET_SUCCESS","DELETE_SNIPPET_ERROR","SnippetsList","React","lazy","SnippetEditPage","Header","Layout","Footer","Content","Loading","AppLayout","props","to","href","target","rel","path","exact","render","fallback","initialState","loading","snippets","fetchSnippetsError","undefined","createSnippetError","updateSnippetError","reduceFunctions","actionTypes","state","action","updatedSnippets","map","oldSnippet","id","snippet","error","createSnippetSuccess","updateSnippetSuccess","deleteSnippetError","deleteSnippetSuccess","deletedSnippet","actions","reducer","reduceFn","type","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","SnippetRepository","get","FirebaseClient","mapResponseWithFirebaseId","getAll","mapResponseWithFirebaseIds","create","post","r","data","name","delete","update","put","setLoading","setSnippets","fetchSnippetsSuccess","dispatch","fetchSnippets","setUpdatedSnippet","updateSnippet","createSnippet","createdSnippet","deleteSnippet","snippetId","response","collection","Object","keys","key","axios","baseURL"],"mappings":"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","file":"static/js/main.5ef9b874.chunk.js","sourcesContent":["export const SET_LOADING = 'SET_LOADING';\n\nexport const FETCH_SNIPPETS = 'FETCH_SNIPPETS';\nexport const FETCH_SNIPPETS_SUCCESS = 'FETCH_SNIPPETS_SUCCESS';\nexport const FETCH_SNIPPETS_ERROR = 'FETCH_SNIPPETS_ERROR';\nexport const SET_SNIPPETS = 'SET_SNIPPETS';\n\nexport const SET_UPDATED_SNIPPET = 'SET_UPDATED_SNIPPET';\nexport const UPDATE_SNIPPET = 'UPDATE_SNIPPET';\nexport const UPDATE_SNIPPET_SUCCESS = 'UPDATE_SNIPPET_SUCCESS';\nexport const UPDATE_SNIPPET_ERROR = 'UPDATE_SNIPPET_ERROR';\n\nexport const CREATE_SNIPPET = 'CREATE_SNIPPET';\nexport const CREATE_SNIPPET_SUCCESS = 'CREATE_SNIPPET_SUCCESS';\nexport const CREATE_SNIPPET_ERROR = 'CREATE_SNIPPET_ERROR';\n\nexport const DELETE_SNIPPET = 'DELETE_SNIPPET';\nexport const DELETE_SNIPPET_SUCCESS = 'DELETE_SNIPPET_SUCCESS';\nexport const DELETE_SNIPPET_ERROR = 'DELETE_SNIPPET_ERROR';\n","/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/require-default-props */\nimport React, { Suspense } from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Layout } from 'antd';\n\nconst SnippetsList = React.lazy(() => import('../../pages/snippet/SnippetsList/SnippetsList'));\nconst SnippetEditPage = React.lazy(() => import('../../pages/snippet/SnippetEditPage/SnippetEditPage'));\n\nconst { Header, Footer, Content } = Layout;\n\nconst Loading = () => <div>Loading...</div>;\n\nfunction AppLayout(props) {\n  return (\n    <Layout>\n      <Header>\n        <h1>\n          <Link to=\"/\">\n            {'<Sniptr />'}\n          </Link>\n        </h1>\n        <span>\n          by\n          <a\n            href=\"https://github.com/otaviotech\" target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Otávio Araújo\n          </a>\n        </span>\n      </Header>\n      <Content>\n        <Switch>\n          <Route path=\"/snippets\" exact render={() => (\n            <Suspense fallback={<Loading />}>\n              <SnippetsList />\n            </Suspense>\n          )} />\n          <Route path=\"/\" exact render={() => (\n            <Suspense fallback={<Loading />}>\n              <SnippetsList />\n            </Suspense>\n          )} />\n          <Route path=\"/snippets/:snippetId\" exact render={() => (\n            <Suspense fallback={<Loading />}>\n              <SnippetEditPage />\n            </Suspense>\n          )} />\n          <Route render={() => <h1>404 - Not found.</h1>} />\n        </Switch>\n      </Content>\n      <Footer />\n    </Layout>\n  );\n}\n\nAppLayout.propTypes = {\n  children: PropTypes.object,\n};\n\nexport default AppLayout;\n\n","import * as actionTypes from './actionTypes';\n\nconst initialState = {\n  loading: false,\n  snippets: [],\n  fetchSnippetsError: undefined,\n  createSnippetError: undefined,\n  updateSnippetError: undefined,\n};\n\nconst reduceFunctions = {\n  [actionTypes.SET_LOADING]: (state, action) => ({\n    ...state,\n    loading: action.loading,\n  }),\n\n  [actionTypes.SET_SNIPPETS]: (state, action) => ({\n    ...state,\n    snippets: action.snippets,\n  }),\n\n  [actionTypes.SET_UPDATED_SNIPPET]: (state, action) => {\n    const updatedSnippets = state.snippets.map((oldSnippet) => {\n      return oldSnippet.id === action.snippet.id\n        ? action.snippet\n        : oldSnippet;\n    });\n\n    return {\n      ...state,\n      snippets: updatedSnippets,\n    };\n  },\n\n  [actionTypes.FETCH_SNIPPETS_ERROR]: (state, action) => {\n    return {\n      ...state,\n      fetchSnippetsError: action.error,\n    };\n  },\n\n  [actionTypes.CREATE_SNIPPET_ERROR]: (state, action) => {\n    return {\n      ...state,\n      createSnippetError: action.error,\n    };\n  },\n\n  [actionTypes.CREATE_SNIPPET_SUCCESS]: (state, action) => {\n    return {\n      ...state,\n      createSnippetSuccess: action.snippet,\n    };\n  },\n\n  [actionTypes.UPDATE_SNIPPET_ERROR]: (state, action) => {\n    return {\n      ...state,\n      updateSnippetError: action.error,\n    };\n  },\n\n  [actionTypes.UPDATE_SNIPPET_SUCCESS]: (state, action) => {\n    return {\n      ...state,\n      updateSnippetSuccess: action.snippet,\n    };\n  },\n\n  [actionTypes.DELETE_SNIPPET_ERROR]: (state, action) => {\n    return {\n      ...state,\n      deleteSnippetError: action.error,\n    };\n  },\n\n  [actionTypes.DELETE_SNIPPET_SUCCESS]: (state, action) => {\n    return {\n      ...state,\n      deleteSnippetSuccess: action.deletedSnippet,\n    };\n  },\n};\n\nconst reducer = (state = initialState, action) => {\n  const reduceFn = reduceFunctions[action.type];\n  return reduceFn ? reduceFn(state, action) : state;\n};\n\nexport default reducer;\n","import * as actionTypes from './actionTypes';\nimport * as actions from './actions';\nimport reducer from './reducer';\n\nexport default {\n  actionTypes,\n  actions,\n  reducer,\n};\n","import { combineReducers } from 'redux';\nimport snippet from '../modules/snippet';\n\nconst rootReducer = combineReducers({\n  snippet: snippet.reducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n\tapplyMiddleware(thunk),\n));\n\nexport default store;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport AppLayout from './components/layout/AppLayout';\nimport store from './store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HashRouter>\n        <AppLayout />\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-source-sans-pro';\nimport './style/app.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import FirebaseClient, { mapResponseWithFirebaseIds, mapResponseWithFirebaseId } from './firebaseClient';\n\nconst getAll = () => FirebaseClient.get('/snippets.json').then(mapResponseWithFirebaseIds);\n\nconst get = (id) => FirebaseClient.get(`/snippets/${id}.json`).then(mapResponseWithFirebaseId(id));\n\nconst create = (snippet) => FirebaseClient.post('/snippets.json', snippet).then(r => ({ ...snippet, id: r.data.name }));\n\nconst deleteSnippet = (id) => FirebaseClient.delete(`/snippets/${id}.json`).then(() => ({ id }));\n\nconst update = (snippet) => FirebaseClient.put(`/snippets/${snippet.id}.json`, snippet);\n\nconst SnippetRepository = {\n  get,\n  getAll,\n  create,\n  delete: deleteSnippet,\n  update,\n};\n\nexport default SnippetRepository;\n","import * as actionTypes from './actionTypes';\nimport SnippetRepository from '../../../repositories/snippet';\n\nexport const setLoading = (loading) => ({ type: actionTypes.SET_LOADING, loading });\n\nexport const setSnippets = (snippets) => ({ type: actionTypes.SET_SNIPPETS, snippets });\n\nexport const fetchSnippetsSuccess = (snippets) => (dispatch) => {\n  dispatch(setSnippets(snippets));\n};\n\nexport const fetchSnippetsError = (error) => ({\n  type: actionTypes.FETCH_SNIPPETS_ERROR,\n  error,\n});\n\nexport const fetchSnippets = () => (dispatch) => {\n  return SnippetRepository.getAll()\n    .then((snippets) => { dispatch(fetchSnippetsSuccess(snippets)); })\n    .catch((error) => { dispatch(fetchSnippetsError(error)); });\n};\n\nexport const setUpdatedSnippet = (snippet) => ({\n  type: actionTypes.SET_UPDATED_SNIPPET,\n  snippet,\n});\n\nexport const updateSnippetSuccess = (snippet) => (dispatch) => {\n  dispatch(setUpdatedSnippet(snippet));\n\n  return {\n    type: actionTypes.UPDATE_SNIPPET_SUCCESS,\n    snippet,\n  };\n};\n\nexport const updateSnippetError = (error) => ({\n  type: actionTypes.UPDATE_SNIPPET_ERROR,\n  error,\n});\n\nexport const updateSnippet = (snippet) => (dispatch) => {\n  return SnippetRepository.update(snippet)\n    .then(() => dispatch(updateSnippetSuccess(snippet)))\n    .catch((error) => dispatch(updateSnippetError(error)));\n};\n\nexport const createSnippetSuccess = (snippet) => ({\n  type: actionTypes.CREATE_SNIPPET_SUCCESS,\n  snippet,\n});\n\nexport const createSnippetError = (error) => ({\n  type: actionTypes.CREATE_SNIPPET_ERROR,\n  error,\n});\n\nexport const createSnippet = (snippet) => (dispatch) => {\n  return SnippetRepository.create(snippet)\n    .then((createdSnippet) => dispatch(createSnippetSuccess(createdSnippet)))\n    .catch((error) => dispatch(createSnippetError(error)));\n};\n\nexport const deleteSnippetSuccess = (deletedSnippet) => ({\n  type: actionTypes.DELETE_SNIPPET_SUCCESS,\n  deletedSnippet,\n});\n\nexport const deleteSnippetError = (error) => ({\n  type: actionTypes.DELETE_SNIPPET_ERROR,\n  error,\n});\n\nexport const deleteSnippet = (snippetId) => (dispatch) => {\n  return SnippetRepository.delete(snippetId)\n    .then((deletedSnippet) => dispatch(deleteSnippetSuccess(deletedSnippet)))\n    .catch((error) => dispatch(deleteSnippetError(error)));\n};\n","import axios from 'axios';\n\nexport function mapFirebaseIds (collection) {\n  return Object\n    .keys(collection)\n    .map((key)=> ({\n      ...collection[key],\n      id: key,\n    }));\n}\n\nexport function mapResponseWithFirebaseIds (response) {\n  if (!response.data) {\n    return [];\n  }\n\n  return mapFirebaseIds(response.data);\n}\n\nexport function mapResponseWithFirebaseId(id) {\n  return (response) => {\n    if (!response.data){\n      return response.data;\n    }\n\n    return {\n      ...response.data,\n      id,\n    };\n  };\n}\n\nconst FirebaseClient = axios.create({\n  baseURL: 'https://quickstart-1552009802740.firebaseio.com',\n});\n\nexport default FirebaseClient;\n"],"sourceRoot":""}