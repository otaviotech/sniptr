{"version":3,"sources":["components/layout/AppLayout.js","repositories/firebaseClient.js","repositories/snippet.js","components/SnippetEditor/SnippetEditor.js","repositories/programmingLanguage.js","components/ProgrammingLanguageSelector/ProgrammingLanguageSelector.js","components/SnippetForm/SnippetForm.js","components/Snippet/Snippet.js","components/SnippetList/SnippetList.js","pages/snippet/SnippetsList.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Content","AppLayout","props","href","target","rel","children","mapResponseWithFirebaseIds","response","collection","data","Object","keys","map","key","id","FirebaseClient","axios","create","baseURL","SnippetRepository","getAll","get","then","snippet","post","delete","update","put","SnippetEditor","mode","theme","width","onChange","debounce","debounceDelay","value","name","placeholder","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","fontSize","highlightSelectedWord","maxLines","minLines","animatedScroll","defaultProps","ProgrammingLanguageSelector","fetchProgrammingLanguages","setState","isFetchingProgrammingLanguages","ProgrammingLanguageRepository","programmingLanguages","renderLanguagesMenu","onClick","state","pl","Item","this","loaderIcon","LoadingOutlined","spin","loader","indicator","hasProgrammingLanguages","length","hasLanguageSelected","programmingLanguageId","selectedLanguageName","find","selectedLanguageFileExtension","fileExtensions","Button","overlay","icon","Component","SnippetForm","layout","label","e","onChangeName","CARD_TAB","tabList","tab","Snippet","onChangeBodyHandler","body","onChangeProgrammingLanguageHandler","onChangeNameHandler","currentTab","nextProps","nextState","some","condition","title","onTabChange","activeTabKey","tabBarExtraContent","placement","QuestionCircleOutlined","style","color","onConfirm","onDelete","type","DeleteOutlined","SnippetList","gutter","snippets","xs","sm","md","xxl","onChangeSnippet","SnippetsList","fetchSnippets","onChangeBody","prevState","resetSnippet","undefined","addSnippetHandler","addSnippet","deleteSnippetHandler","message","success","updateSnippet","changeSnippetHandler","changedSnippet","oldSnippet","isAddButtonDisabled","direction","justify","isEditingSnippet","saveSnippetHandler","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.24552c6b.chunk.js","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/require-default-props */\nimport React from 'react';\nimport { Layout } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Header, Footer, Content } = Layout;\n\nfunction AppLayout(props) {\n  return (\n    <Layout>\n      <Header>\n        <h1>{'<Sniptr />'}</h1>\n        <span>\n          by\n          <a\n            href=\"https://github.com/otaviotech\" target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Otávio Araújo\n          </a>\n        </span>\n      </Header>\n      <Content>{props.children}</Content>\n      <Footer />\n    </Layout>\n  );\n}\n\nAppLayout.propTypes = {\n  children: PropTypes.object,\n};\n\nexport default AppLayout;\n\n","import axios from 'axios';\n\nexport function mapFirebaseIds (collection) {\n  return Object\n    .keys(collection)\n    .map((key)=> ({\n      ...collection[key],\n      id: key,\n    }));\n}\n\nexport function mapResponseWithFirebaseIds (response) {\n  return mapFirebaseIds(response.data);\n}\n\nconst FirebaseClient = axios.create({\n  baseURL: 'https://quickstart-1552009802740.firebaseio.com',\n});\n\nexport default FirebaseClient;\n","import FirebaseClient, { mapResponseWithFirebaseIds } from './firebaseClient';\n\nconst getAll = () => FirebaseClient.get('/snippets.json').then(mapResponseWithFirebaseIds);\n\nconst create = (snippet) => FirebaseClient.post('/snippets.json', snippet);\n\nconst deleteSnippet = (id) => FirebaseClient.delete(`/snippets/${id}.json`);\n\nconst update = (snippet) => FirebaseClient.put(`/snippets/${snippet.id}.json`, snippet);\n\nconst SnippetRepository = {\n  getAll,\n  create,\n  delete: deleteSnippet,\n  update,\n};\n\nexport default SnippetRepository;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AceEditor from 'react-ace';\nimport { debounce } from 'debounce';\n\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/snippets/javascript';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\n\nfunction SnippetEditor(props) {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"tomorrow\"\n      width=\"100%\"\n      onChange={debounce(props.onChange, props.debounceDelay)}\n      value={props.value}\n      name=\"UNIQUE_ID_OF_DIV\"\n      placeholder={props.placeholder}\n      showPrintMargin\n      showGutter\n      highlightActiveLine\n      editorProps={{ $blockScrolling: true }}\n      setOptions={{\n        useWorker: false,\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n        fontSize: 16,\n        highlightSelectedWord: true,\n        // enableEmmet: true,\n        maxLines: 10,\n        minLines: 10,\n        animatedScroll: true,\n      }}\n    />\n  );\n}\n\nSnippetEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  debounceDelay: PropTypes.number,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nSnippetEditor.defaultProps = {\n  debounceDelay: 300,\n};\n\nexport default SnippetEditor;\n","import FirebaseClient, { mapResponseWithFirebaseIds } from './firebaseClient';\n\nconst getAll = () => FirebaseClient\n  .get('/programmingLanguages.json')\n  .then(mapResponseWithFirebaseIds);\n\nexport default {\n  getAll,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, Dropdown, Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageRepository from '../../repositories/programmingLanguage';\n\nclass ProgrammingLanguageSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      programmingLanguages: [],\n      isFetchingProgrammingLanguages: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProgrammingLanguages();\n  }\n\n\tfetchProgrammingLanguages = () => {\n\t  this.setState({ isFetchingProgrammingLanguages: true });\n\n\t  ProgrammingLanguageRepository\n\t    .getAll()\n\t    .then((programmingLanguages) => {\n\t      this.setState({ programmingLanguages });\n\t      this.setState({ isFetchingProgrammingLanguages: false });\n\t    });\n\t}\n\n\trenderLanguagesMenu = () => (\n    <Menu onClick={({ key }) => this.props.onChange(key)}>\n\t\t\t{this.state.programmingLanguages.map((pl) => (\n\t\t\t\t<Menu.Item key={pl.id}>\n\t\t\t\t\t{pl.name}\n\t\t\t\t</Menu.Item>\n\t\t\t))}\n\t\t</Menu>\n\t)\n\n\trender() {\n\t  const loaderIcon = <LoadingOutlined spin />;\n\t  const loader = <Spin indicator={loaderIcon} />;\n\n\t  if (this.state.isFetchingProgrammingLanguages) return loader;\n\n\t  const hasProgrammingLanguages = this.state.programmingLanguages.length > 0;\n\t  const hasLanguageSelected = !!this.props.programmingLanguageId;\n\n\t  const selectedLanguageName = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).name\n\t    : 'Language...';\n\n\t  const selectedLanguageFileExtension = (hasProgrammingLanguages && hasLanguageSelected)\n\t    ? this.state.programmingLanguages.find(pl => pl.id === this.props.programmingLanguageId).fileExtensions[0]\n\t    : '.ext';\n\n\t  return (\n\t\t\t<Dropdown.Button\n\t\t\t\toverlay={this.renderLanguagesMenu()}\n        icon={<span>{selectedLanguageFileExtension}</span>}\n\t\t\t>\n        {selectedLanguageName}\n\t\t\t</Dropdown.Button>\n\t  );\n\t}\n}\n\nProgrammingLanguageSelector.propTypes = {\n  programmingLanguageId: PropTypes.string, // eslint-disable-line\n  onChange: PropTypes.func.isRequired,\n};\n\n\nexport default ProgrammingLanguageSelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input } from 'antd';\n\nconst SnippetForm = (props) => {\n  return (\n    <Form layout=\"vertical\">\n      <Form.Item label=\"Name: \">\n        <Input\n          placeholder=\"Print a Javascript array.\"\n          value={props.snippet.name}\n          onChange={e => props.onChangeName(e.target.value)}\n        />\n      </Form.Item>\n    </Form>\n  );\n};\n\nSnippetForm.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  onChangeName: PropTypes.func.isRequired,\n};\n\nexport default SnippetForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Tooltip, Popconfirm } from 'antd';\nimport { DeleteOutlined, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport ProgrammingLanguageSelector from '../ProgrammingLanguageSelector/ProgrammingLanguageSelector';\nimport SnippetForm from '../SnippetForm/SnippetForm';\nimport SnippetEditor from '../SnippetEditor/SnippetEditor';\n\nconst CARD_TAB = {\n  VIEW: 'VIEW',\n  EDIT: 'EDIT',\n};\n\nconst tabList = [\n  {\n    key: CARD_TAB.VIEW,\n    tab: 'View',\n  },\n  {\n    key: CARD_TAB.EDIT,\n    tab: 'Edit',\n  },\n];\n\nclass Snippet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: CARD_TAB.EDIT,\n    };\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return [\n      nextProps.snippet.body !== this.props.snippet.body,\n      nextProps.snippet.programmingLanguageId !== this.props.snippet.programmingLanguageId,\n      nextProps.snippet.name !== this.props.snippet.name,\n      nextState.currentTab !== this.state.currentTab,\n    ].some(condition => condition === true);\n  }\n\n  onChangeBodyHandler = (body) => {\n    if (body === this.props.snippet.body) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      body,\n    });\n  }\n\n  onChangeProgrammingLanguageHandler = (programmingLanguageId) => {\n    if (programmingLanguageId === this.props.snippet.programmingLanguageId) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      programmingLanguageId,\n    });\n  }\n\n  onChangeNameHandler = (name) => {\n    if (name === this.props.snippet.name) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      name,\n    });\n  }\n\n  render() {\n    return (\n      <Card\n        title={this.props.snippet.name || `Snippet ${this.props.snippet.id}`}\n        tabList={tabList}\n        onTabChange={(currentTab) => this.setState({ currentTab })}\n        activeTabKey={this.state.currentTab}\n        tabBarExtraContent={\n          <Tooltip title=\"Delete\">\n            <Popconfirm\n              placement=\"topLeft\"\n              title=\"Are you sure？\"\n              icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n              onConfirm={this.props.onDelete}\n            >\n              <Button type=\"danger\" icon={<DeleteOutlined />} />\n            </Popconfirm>\n          </Tooltip>\n        }\n      >\n        {this.state.currentTab === CARD_TAB.VIEW && (\n          <SnippetEditor\n            value={this.props.snippet.body}\n            onChange={this.onChangeBodyHandler}\n            debounceDelay={800}\n            placeholder=\"Your <Awesome /> snippet.\"\n          />\n        )}\n\n        {this.state.currentTab === CARD_TAB.EDIT && (\n          <>\n            <SnippetForm\n              snippet={this.props.snippet}\n              onChangeName={this.onChangeNameHandler}\n            />\n            <ProgrammingLanguageSelector\n              programmingLanguageId={this.props.snippet.programmingLanguageId}\n              onChange={this.onChangeProgrammingLanguageHandler}\n            />\n          </>\n        )}\n      </Card>\n    );\n  }\n}\n\nSnippet.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    programmingLanguageId: PropTypes.string,\n  }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Snippet;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'antd';\nimport Snippet from '../Snippet/Snippet';\n\nfunction SnippetList(props) {\n  return (\n    <Row gutter={[24, 24]}>\n      {props.snippets.map((snippet) => (\n        <Col xs={24} sm={24} md={12} xxl={6} key={snippet.id}>\n          <Snippet\n            snippet={snippet}\n            onDelete={() => props.onDelete(snippet.id)}\n            onChange={props.onChangeSnippet}\n          />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nSnippetList.propTypes = {\n  snippets: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      body: PropTypes.string.isRequired,\n      programmingLanguageId: PropTypes.string,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChangeSnippet: PropTypes.func.isRequired,\n};\n\nexport default SnippetList;\n","import React, { Component } from 'react';\nimport { Row, Col, Button, Space, message } from 'antd';\nimport { debounce } from 'debounce';\nimport SnippetRepository from '../../repositories/snippet';\nimport SnippetEditor from '../../components/SnippetEditor/SnippetEditor';\nimport SnippetList from '../../components/SnippetList/SnippetList';\n\nclass SnippetsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snippets: [],\n      snippet: {\n        id: undefined,\n        name: '',\n        body: '',\n        programmingLanguageId: undefined,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSnippets();\n  }\n\n  fetchSnippets = () => {\n    SnippetRepository.getAll()\n      .then((snippets) => {\n        this.setState({ snippets });\n      });\n  }\n\n  onChangeBody = (body) => {\n    this.setState((prevState) => ({\n      snippet: {\n        ...prevState.snippet,\n        body,\n      },\n    }));\n  };\n\n  resetSnippet = () => {\n    this.setState({\n      snippet: {\n        id: undefined,\n        body: '',\n      },\n    });\n  };\n\n  addSnippetHandler = () => {\n    this.addSnippet(this.state.snippet);\n  };\n\n  deleteSnippetHandler = (id) => {\n    SnippetRepository.delete(id)\n      .then(() => {\n        this.fetchSnippets();\n        message.success('Snippet successfuly deleted.');\n      });\n  };\n\n  updateSnippet = debounce((snippet) => { // eslint-disable-line\n    SnippetRepository.update(snippet)\n      .then(() => {\n        message.success('Snippet successfuly saved.');\n      });\n  }, 1000)\n\n  changeSnippetHandler = (changedSnippet) => {\n    this.setState((prevState) => {\n      const updatedSnippets = prevState.snippets.map((oldSnippet) => {\n        return oldSnippet.id === changedSnippet.id\n          ? changedSnippet\n          : oldSnippet;\n      });\n\n      return { snippets: updatedSnippets };\n    });\n\n    this.updateSnippet(changedSnippet);\n  };\n\n  addSnippet = (snippet) => {\n    SnippetRepository.create(snippet)\n      .then(() => {\n        this.resetSnippet();\n        this.fetchSnippets();\n        message.success('Snippet successfuly added.');\n      });\n  };\n\n  render() {\n    const isAddButtonDisabled = this.state.snippet.body.length === 0;\n\n    return (\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Row gutter={16}>\n          <Col>\n            <h1>SnippetsList</h1>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24}>\n            <SnippetEditor\n              value={this.state.snippet.body}\n              onChange={this.onChangeBody}\n              placeholder=\"Your <Awesome /> snippet...\"\n            />\n          </Col>\n        </Row>\n\n        <Row justify=\"end\">\n          <Col>\n            <Button\n              type=\"primary\"\n              onClick={\n                this.state.isEditingSnippet\n                  ? this.saveSnippetHandler\n                  : this.addSnippetHandler\n              }\n              disabled={isAddButtonDisabled}\n            >\n              {this.state.isEditingSnippet ? 'Save' : 'Add'} snippet!\n            </Button>\n          </Col>\n        </Row>\n\n        <section>\n          <Row>\n            <Col>\n              <h1>Your snippets</h1>\n            </Col>\n          </Row>\n          <SnippetList\n            snippets={this.state.snippets}\n            onChangeSnippet={this.changeSnippetHandler}\n            onDelete={this.deleteSnippetHandler}\n          />\n        </section>\n      </Space>\n    );\n  }\n}\n\nexport default SnippetsList;\n","import React from 'react';\nimport AppLayout from './components/layout/AppLayout';\nimport SnippetsList from './pages/snippet/SnippetsList';\n\nfunction App() {\n  return (\n    <AppLayout>\n      <SnippetsList />\n    </AppLayout>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-source-sans-pro';\nimport './style/app.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}