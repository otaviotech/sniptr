{"version":3,"sources":["components/layout/AppLayout.js","repositories/firebaseClient.js","repositories/snippet.js","components/SnippetEditor/SnippetEditor.js","components/Snippet/Snippet.js","components/SnippetList/SnippetList.js","pages/snippet/SnippetsList.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Content","AppLayout","props","href","target","children","FirebaseClient","axios","create","baseURL","SnippetRepository","getAll","get","then","res","collection","data","Object","keys","map","key","id","snippet","post","delete","update","put","SnippetEditor","mode","theme","width","onChange","debounce","debounceDelay","value","name","placeholder","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","fontSize","highlightSelectedWord","maxLines","minLines","animatedScroll","defaultProps","CARD_TAB","tabList","tab","Snippet","onChangeBodyHandler","body","state","currentTab","nextProps","nextState","this","some","condition","title","onTabChange","setState","activeTabKey","tabBarExtraContent","placement","icon","QuestionCircleOutlined","style","color","onConfirm","onDelete","type","DeleteOutlined","Component","SnippetList","gutter","snippets","xs","sm","md","xxl","onChangeSnippet","SnippetsList","fetchSnippets","onChangeBody","prevState","resetSnippet","undefined","addSnippetHandler","addSnippet","deleteSnippetHandler","message","success","changeSnippetHandler","changedSnippet","isAddButtonDisabled","length","direction","justify","onClick","isEditingSnippet","saveSnippetHandler","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.01dda858.chunk.js","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/require-default-props */\nimport React from 'react';\nimport { Layout } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Header, Footer, Content } = Layout;\n\nexport default function AppLayout(props) {\n  return (\n    <Layout>\n      <Header>\n        <h1>{'<Sniptr />'}</h1>\n        <span>by <a href=\"https://github.com/otaviotech\" target=\"_blank\">Otávio Araújo</a></span>\n      </Header>\n      <Content>{props.children}</Content>\n      <Footer />\n    </Layout>\n  );\n}\n\nAppLayout.propTypes = {\n  children: PropTypes.object,\n};\n","import axios from 'axios';\n\nconst FirebaseClient = axios.create({\n  baseURL: 'https://quickstart-1552009802740.firebaseio.com',\n});\n\nexport default FirebaseClient;\n","import FirebaseClient from './firebaseClient.js';\n\nfunction mapFirebaseIds (collection) {\n  return Object\n    .keys(collection)\n    .map((key)=> ({\n      ...collection[key],\n      id: key,\n    }));\n}\n\nconst getAll = () => FirebaseClient.get('/snippets.json').then(res => mapFirebaseIds(res.data));\n\nconst create = (snippet) => FirebaseClient.post('/snippets.json', snippet);\n\nconst deleteSnippet = (id) => FirebaseClient.delete(`/snippets/${id}.json`);\n\nconst update = (snippet) => FirebaseClient.put(`/snippets/${snippet.id}.json`, snippet);\n\nconst SnippetRepository = {\n  getAll,\n  create,\n  delete: deleteSnippet,\n  update,\n};\n\nexport default SnippetRepository;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AceEditor from 'react-ace';\nimport { debounce } from 'debounce';\n\nimport 'ace-builds/src-noconflict/theme-tomorrow';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/snippets/javascript';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\n\nfunction SnippetEditor(props) {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"tomorrow\"\n      width=\"100%\"\n      onChange={debounce(props.onChange, props.debounceDelay)}\n      value={props.value}\n      name=\"UNIQUE_ID_OF_DIV\"\n      placeholder={props.placeholder}\n      showPrintMargin\n      showGutter\n      highlightActiveLine\n      editorProps={{ $blockScrolling: true }}\n      setOptions={{\n        useWorker: false,\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n        fontSize: 16,\n        highlightSelectedWord: true,\n        // enableEmmet: true,\n        maxLines: 10,\n        minLines: 10,\n        animatedScroll: true,\n      }}\n    />\n  );\n}\n\nSnippetEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  debounceDelay: PropTypes.number,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nSnippetEditor.defaultProps = {\n  debounceDelay: 300,\n};\n\nexport default SnippetEditor;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Button, Tooltip, Popconfirm } from 'antd';\nimport { DeleteOutlined, QuestionCircleOutlined } from '@ant-design/icons';\n\nimport SnippetEditor from '../SnippetEditor/SnippetEditor';\n\nconst CARD_TAB = {\n  VIEW: 'VIEW',\n  EDIT: 'EDIT',\n};\n\nconst tabList = [\n  {\n    key: CARD_TAB.VIEW,\n    tab: 'View',\n  },\n  {\n    key: CARD_TAB.EDIT,\n    tab: 'Edit',\n  },\n];\n\nclass Snippet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: CARD_TAB.VIEW,\n    };\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return [\n      nextProps.snippet.body !== this.props.snippet.body,\n      nextState.currentTab !== this.state.currentTab,\n    ].some(condition => condition === true);\n  }\n\n  onChangeBodyHandler = (body) => {\n    if (body === this.props.snippet.body) {\n      return;\n    }\n\n    this.props.onChange({\n      ...this.props.snippet,\n      body,\n    });\n  }\n\n  render() {\n    return (\n      <Card\n        title={`Snippet ${this.props.snippet.id}`}\n        tabList={tabList}\n        onTabChange={(currentTab) => this.setState({ currentTab })}\n        activeTabKey={this.state.currentTab}\n        tabBarExtraContent={\n          <Tooltip title=\"Delete\">\n            <Popconfirm\n              placement=\"topLeft\"\n              title=\"Are you sure？\"\n              icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n              onConfirm={this.props.onDelete}\n            >\n              <Button type=\"danger\" icon={<DeleteOutlined />} />\n            </Popconfirm>\n          </Tooltip>\n        }\n      >\n        <SnippetEditor\n          value={this.props.snippet.body}\n          onChange={this.onChangeBodyHandler}\n\t  debounceDelay={800}\n          placeholder=\"Your <Awesome /> snippet.\"\n        />\n      </Card>\n    );\n  }\n}\n\nSnippet.propTypes = {\n  snippet: PropTypes.exact({\n    id: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Snippet;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col } from 'antd';\nimport Snippet from '../Snippet/Snippet';\n\nfunction SnippetList(props) {\n  return (\n    <Row gutter={[24, 24]}>\n      {props.snippets.map((snippet) => (\n        <Col xs={24} sm={24} md={12} xxl={6} key={snippet.id}>\n          <Snippet\n            snippet={snippet}\n            onDelete={() => props.onDelete(snippet.id)}\n            onChange={props.onChangeSnippet}\n          />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nSnippetList.propTypes = {\n  snippets: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      body: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChangeSnippet: PropTypes.func.isRequired,\n};\n\nexport default SnippetList;\n","import React, { Component } from 'react';\nimport { Row, Col, Button, Space, message } from 'antd';\nimport SnippetRepository from '../../repositories/snippet';\nimport SnippetEditor from '../../components/SnippetEditor/SnippetEditor';\nimport SnippetList from '../../components/SnippetList/SnippetList';\n\nclass SnippetsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snippets: [],\n      snippet: {\n        id: undefined,\n        body: '',\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSnippets();\n  }\n\n  fetchSnippets = () => {\n    SnippetRepository.getAll()\n      .then((snippets) => {\n        this.setState({ snippets });\n      });\n  }\n\n  onChangeBody = (body) => {\n    this.setState((prevState) => ({\n      snippet: {\n        ...prevState.snippet,\n        body,\n      },\n    }));\n  };\n\n  resetSnippet = () => {\n    this.setState({\n      snippet: {\n        id: undefined,\n        body: '',\n      },\n    });\n  };\n\n  addSnippetHandler = () => {\n    this.addSnippet(this.state.snippet);\n  };\n\n  deleteSnippetHandler = (id) => {\n    SnippetRepository.delete(id)\n      .then(() => {\n        this.fetchSnippets();\n        message.success('Snippet successfuly deleted.');\n      });\n  };\n\n  changeSnippetHandler = (changedSnippet) => {\n    SnippetRepository.update(changedSnippet)\n      .then(() => {\n        this.resetSnippet();\n        message.success('Snippet successfuly saved.');\n      });\n  };\n\n  addSnippet = (snippet) => {\n    SnippetRepository.create(snippet)\n      .then(() => {\n        this.resetSnippet();\n        this.fetchSnippets();\n        message.success('Snippet successfuly added.');\n      });\n  };\n\n  render() {\n    const isAddButtonDisabled = this.state.snippet.body.length === 0;\n\n    return (\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Row gutter={16}>\n          <Col>\n            <h1>SnippetsList</h1>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24}>\n            <SnippetEditor\n              value={this.state.snippet.body}\n              onChange={this.onChangeBody}\n              placeholder=\"Your <Awesome /> snippet...\"\n            />\n          </Col>\n        </Row>\n\n        <Row justify=\"end\">\n          <Col>\n            <Button\n              type=\"primary\"\n              onClick={\n                this.state.isEditingSnippet\n                  ? this.saveSnippetHandler\n                  : this.addSnippetHandler\n              }\n              disabled={isAddButtonDisabled}\n            >\n              {this.state.isEditingSnippet ? 'Save' : 'Add'} snippet!\n            </Button>\n          </Col>\n        </Row>\n\n        <section>\n          <Row>\n            <Col>\n              <h1>Your snippets</h1>\n            </Col>\n          </Row>\n          <SnippetList\n            snippets={this.state.snippets}\n            onChangeSnippet={this.changeSnippetHandler}\n            onDelete={this.deleteSnippetHandler}\n          />\n        </section>\n      </Space>\n    );\n  }\n}\n\nexport default SnippetsList;\n","import React from 'react';\nimport AppLayout from './components/layout/AppLayout';\nimport SnippetsList from './pages/snippet/SnippetsList';\n\nfunction App() {\n  return (\n    <AppLayout>\n      <SnippetsList />\n    </AppLayout>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-source-sans-pro';\nimport './style/app.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}